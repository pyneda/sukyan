package db

// NOTE: This file is automatically generated. Do not edit manually.

var (
	AdminInterfaceDetectedCode           IssueCode = "admin_interface_detected"
	ApacheStrutsDevModeCode              IssueCode = "apache_struts_dev_mode"
	ApacheTapestryExceptionCode          IssueCode = "apache_tapestry_exception"
	AspNetMvcHeaderCode                  IssueCode = "asp_net_mvc_header"
	AspnetTraceEnabledCode               IssueCode = "aspnet_trace_enabled"
	Base32EncodedDataInParameterCode     IssueCode = "base32_encoded_data_in_parameter"
	Base36EncodedDataInParameterCode     IssueCode = "base36_encoded_data_in_parameter"
	Base64EncodedDataInParameterCode     IssueCode = "base64_encoded_data_in_parameter"
	BlindSqlInjectionCode                IssueCode = "blind_sql_injection"
	CacheControlHeaderCode               IssueCode = "cache_control_header"
	CacheStorageUsageDetectedCode        IssueCode = "cache_storage_usage_detected"
	CdnDetectedCode                      IssueCode = "cdn_detected"
	CertificateErrorsCode                IssueCode = "certificate_errors"
	CiCdInfrastructureFileDetectedCode   IssueCode = "ci_cd_infrastructure_file_detected"
	ClientSidePrototypePollutionCode     IssueCode = "client_side_prototype_pollution"
	CloudDetectedCode                    IssueCode = "cloud_detected"
	ConsoleUsageDetectedCode             IssueCode = "console_usage_detected"
	CorsCode                             IssueCode = "cors"
	CrlfInjectionCode                    IssueCode = "crlf_injection"
	CsrfCode                             IssueCode = "csrf"
	CstiCode                             IssueCode = "csti"
	DatabaseErrorsCode                   IssueCode = "database_errors"
	DbConnectionStringsCode              IssueCode = "db_connection_strings"
	DbManagementInterfaceDetectedCode    IssueCode = "db_management_interface_detected"
	DirectoryListingCode                 IssueCode = "directory_listing"
	DjangoDebugExceptionCode             IssueCode = "django_debug_exception"
	DockerApiDetectedCode                IssueCode = "docker_api_detected"
	DomStorageEventsDetectedCode         IssueCode = "dom_storage_events_detected"
	ElmahExposedCode                     IssueCode = "elmah_exposed"
	EmailAddressesCode                   IssueCode = "email_addresses"
	EnvironmentFileExposedCode           IssueCode = "environment_file_exposed"
	EsiDetectedCode                      IssueCode = "esi_detected"
	EsiInjectionCode                     IssueCode = "esi_injection"
	ExposedApiCredentialsCode            IssueCode = "exposed_api_credentials"
	ExposedAxis2EndpointCode             IssueCode = "exposed_axis2_endpoint"
	ExposedCloudMetadataCode             IssueCode = "exposed_cloud_metadata"
	ExposedJolokiaEndpointCode           IssueCode = "exposed_jolokia_endpoint"
	ExposedLogFileCode                   IssueCode = "exposed_log_file"
	ExposedPrometheusMetricsCode         IssueCode = "exposed_prometheus_metrics"
	ExposedSpringActuatorEndpointsCode   IssueCode = "exposed_spring_actuator_endpoints"
	FileUploadDetectedCode               IssueCode = "file_upload_detected"
	FlashUsageDetectedCode               IssueCode = "flash_usage_detected"
	ForbiddenBypassCode                  IssueCode = "forbidden_bypass"
	GrailsExceptionCode                  IssueCode = "grails_exception"
	GraphqlIntrospectionEnabledCode      IssueCode = "graphql_introspection_enabled"
	GraphqlEndpointDetectedCode          IssueCode = "graphql_endpoint_detected"
	GrpcEndpointDetectedCode             IssueCode = "grpc_endpoint_detected"
	HeaderInsightsReportCode             IssueCode = "header_insights_report"
	HostHeaderInjectionCode              IssueCode = "host_header_injection"
	Http2DetectedCode                    IssueCode = "http2_detected"
	Http3DetectedCode                    IssueCode = "http3_detected"
	HttpMethodsCode                      IssueCode = "http_methods"
	IdorCode                             IssueCode = "idor"
	IncorrectContentTypeHeaderCode       IssueCode = "incorrect_content_type_header"
	IndexeddbUsageDetectedCode           IssueCode = "indexeddb_usage_detected"
	JavaDeserializationCode              IssueCode = "java_deserialization"
	JavaSerializedObjectDetectedCode     IssueCode = "java_serialized_object_detected"
	JavaServerHeaderCode                 IssueCode = "java_server_header"
	JettyServerHeaderCode                IssueCode = "jetty_server_header"
	JsonpEndpointDetectedCode            IssueCode = "jsonp_endpoint_detected"
	JwtDetectedCode                      IssueCode = "jwt_detected"
	JwtWeakSigningSecretCode             IssueCode = "jwt_weak_signing_secret"
	KubernetesApiDetectedCode            IssueCode = "kubernetes_api_detected"
	LdapInjectionCode                    IssueCode = "ldap_injection"
	Log4shellCode                        IssueCode = "log4shell"
	MissingContentTypeHeaderCode         IssueCode = "missing_content_type_header"
	MixedContentCode                     IssueCode = "mixed_content"
	NetworkAuthChallengeDetectedCode     IssueCode = "network_auth_challenge_detected"
	NosqlInjectionCode                   IssueCode = "nosql_injection"
	OauthEndpointDetectedCode            IssueCode = "oauth_endpoint_detected"
	OobCommunicationsCode                IssueCode = "oob_communications"
	OpenRedirectCode                     IssueCode = "open_redirect"
	OpenapiDefinitionFoundCode           IssueCode = "openapi_definition_found"
	OsCmdInjectionCode                   IssueCode = "os_cmd_injection"
	ParameterPollutionCode               IssueCode = "parameter_pollution"
	PasswordFieldAutocompleteEnabledCode IssueCode = "password_field_autocomplete_enabled"
	PasswordInGetRequestCode             IssueCode = "password_in_get_request"
	PaymentTestEndpointDetectedCode      IssueCode = "payment_test_endpoint_detected"
	PhpInfoDetectedCode                  IssueCode = "php_info_detected"
	PrivateIpsCode                       IssueCode = "private_ips"
	PrivateKeysCode                      IssueCode = "private_keys"
	ReflectedInputCode                   IssueCode = "reflected_input"
	RemoteFileInclusionCode              IssueCode = "remote_file_inclusion"
	SecretsInJsCode                      IssueCode = "secrets_in_js"
	SensitiveConfigDetectedCode          IssueCode = "sensitive_config_detected"
	ServerHeaderCode                     IssueCode = "server_header"
	ServerInfoDetectedCode               IssueCode = "server_info_detected"
	ServerSidePrototypePollutionCode     IssueCode = "server_side_prototype_pollution"
	SessionTokenInUrlCode                IssueCode = "session_token_in_url"
	SilverlightDetectedCode              IssueCode = "silverlight_detected"
	SniInjectionCode                     IssueCode = "sni_injection"
	SocketioDetectedCode                 IssueCode = "socketio_detected"
	SqlInjectionCode                     IssueCode = "sql_injection"
	SsiDetectedCode                      IssueCode = "ssi_detected"
	SsiInjectionCode                     IssueCode = "ssi_injection"
	SsoMetadataDetectedCode              IssueCode = "sso_metadata_detected"
	SsrfCode                             IssueCode = "ssrf"
	SstiCode                             IssueCode = "ssti"
	StorageBucketDetectedCode            IssueCode = "storage_bucket_detected"
	StrictTransportSecurityHeaderCode    IssueCode = "strict_transport_security_header"
	TechStackFingerprintCode             IssueCode = "tech_stack_fingerprint"
	Text4shellCode                       IssueCode = "text4shell"
	UnencryptedPasswordSubmissionCode    IssueCode = "unencrypted_password_submission"
	UnencryptedWebsocketConnectionCode   IssueCode = "unencrypted_websocket_connection"
	VersionControlFileDetectedCode       IssueCode = "version_control_file_detected"
	VulnerableJavascriptDependencyCode   IssueCode = "vulnerable_javascript_dependency"
	WafDetectedCode                      IssueCode = "waf_detected"
	WebassemblyDetectedCode              IssueCode = "webassembly_detected"
	WebserverControlFileExposedCode      IssueCode = "webserver_control_file_exposed"
	WebsocketDetectedCode                IssueCode = "websocket_detected"
	WordpressDetectedCode                IssueCode = "wordpress_detected"
	WsdlDefinitionDetectedCode           IssueCode = "wsdl_definition_detected"
	XAspVersionHeaderCode                IssueCode = "x_asp_version_header"
	XFrameOptionsHeaderCode              IssueCode = "x_frame_options_header"
	XPoweredByHeaderCode                 IssueCode = "x_powered_by_header"
	XXssProtectionHeaderCode             IssueCode = "x_xss_protection_header"
	XpathInjectionCode                   IssueCode = "xpath_injection"
	XsltInjectionCode                    IssueCode = "xslt_injection"
	XssReflectedCode                     IssueCode = "xss_reflected"
	XxeCode                              IssueCode = "xxe"
)

var issueTemplates = []IssueTemplate{
	{
		Code:        AdminInterfaceDetectedCode,
		Title:       "Common admin interface detected",
		Description: "A page with characteristics of a common admin interface or login page has been identified. Unauthorized access to such areas could expose sensitive configurations or data.\n",
		Remediation: "This is an informational issue. Review whether exposing this admin interface is necessary. If exposure is required, ensure it is secured with appropriate access controls such as IP whitelisting, VPNs, and strong authentication mechanisms.\n",
		Cwe:         306,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/05-Enumerate_Infrastructure_and_Application_Admin_Interfaces",
		},
	},
	{
		Code:        ApacheStrutsDevModeCode,
		Title:       "Apache Struts Dev Mode Detected",
		Description: "The application is running in Apache Struts development mode, which could expose sensitive information or debugging data.",
		Remediation: "Ensure the application is running in production mode to prevent the exposure of sensitive information.",
		Cwe:         215,
		Severity:    "Medium",
		References: []string{
			"https://struts.apache.org/core-developers/development-mode",
		},
	},
	{
		Code:        ApacheTapestryExceptionCode,
		Title:       "Apache Tapestry Exception Detected",
		Description: "The application exposes Apache Tapestry exceptions, potentially revealing sensitive information or system details.",
		Remediation: "Configure the application to not expose detailed error messages to end users.",
		Cwe:         209,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        AspNetMvcHeaderCode,
		Title:       "ASP.NET MVC Header Disclosure",
		Description: "The application discloses the use of ASP.NET MVC. This could aid an attacker in crafting ASP.NET MVC-specific exploits.",
		Remediation: "Configure ASP.NET MVC to stop disclosing this information through headers.",
		Cwe:         200,
		Severity:    "Low",
		References:  []string{},
	},
	{
		Code:        AspnetTraceEnabledCode,
		Title:       "ASP.NET Trace Viewer Exposed",
		Description: "The application has ASP.NET tracing enabled and publicly accessible through trace.axd.\nTrace viewing allows anyone to see detailed information about recent requests including\nserver variables, cookies, session state, application variables, request/response headers,\nand form data. This can expose sensitive information and implementation details that\ncould aid an attacker.\n",
		Remediation: "To fix this security issue:\n1. Disable trace viewing in production by setting trace=\"false\" in the Web.config file:\n   <configuration>\n     <system.web>\n       <trace enabled=\"false\" localOnly=\"true\" />\n     </system.web>\n   </configuration>\n2. If tracing is required, ensure it's only accessible locally by setting localOnly=\"true\"\n3. Consider using logging frameworks or APM tools instead of ASP.NET tracing in production\n4. Implement proper authentication if trace viewing must be accessible remotely\n",
		Cwe:         215,
		Severity:    "High",
		References: []string{
			"https://msdn.microsoft.com/en-us/library/bb386420.aspx",
			"https://learn.microsoft.com/en-us/previous-versions/wwh16c6c(v=vs.140)",
		},
	},
	{
		Code:        Base32EncodedDataInParameterCode,
		Title:       "Base32 Encoded Data Detected in Parameter",
		Description: "The application has detected Base32 encoded data in a parameter. While this is not inherently a security vulnerability, it is informational and could be indicative of other issues, such as encoding sensitive information.",
		Remediation: "Review the reason for using Base32 encoding in a parameter. If it is used to obfuscate sensitive data, consider more secure methods of data protection, such as encryption.",
		Cwe:         310,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url",
			"https://auth0.com/blog/encoding-encryption-hashing/",
		},
	},
	{
		Code:        Base36EncodedDataInParameterCode,
		Title:       "Base36 Encoded Data Detected in Parameter",
		Description: "The application has detected Base36 encoded data in a parameter. While this is not inherently a security vulnerability, it is informational and could be indicative of other issues, such as encoding sensitive information.",
		Remediation: "Review the reason for using Base36 encoding in a parameter. If it is used to obfuscate sensitive data, consider more secure methods of data protection, such as encryption.",
		Cwe:         310,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url",
			"https://auth0.com/blog/encoding-encryption-hashing/",
		},
	},
	{
		Code:        Base64EncodedDataInParameterCode,
		Title:       "Base64 Encoded Data Detected in Parameter",
		Description: "The application has detected Base64 encoded data in a parameter. While this is not inherently a security vulnerability, it is informational and could be indicative of other issues, such as encoding sensitive information.",
		Remediation: "Review the reason for using Base64 encoding in a parameter. If it is used to obfuscate sensitive data, consider more secure methods of data protection, such as encryption.",
		Cwe:         310,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url",
			"https://base64.guru/blog/base64-encryption-is-a-lie",
			"https://auth0.com/blog/encoding-encryption-hashing/",
		},
	},
	{
		Code:        BlindSqlInjectionCode,
		Title:       "Blind SQL Injection",
		Description: "The application does not properly sanitize user input, potentially allowing for SQL injection attacks.",
		Remediation: "Ensure all user-supplied input is properly sanitized before being used in SQL queries.",
		Cwe:         89,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/Blind_SQL_Injection",
		},
	},
	{
		Code:        CacheControlHeaderCode,
		Title:       "Cache Control Header Misconfiguration",
		Description: "The application's response can be cached, potentially leading to information disclosure or stale content.",
		Remediation: "Configure your application's headers to prevent sensitive information from being cached. You can set 'Cache-Control: no-store' or 'Cache-Control: private' as needed.",
		Cwe:         524,
		Severity:    "Low",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control",
		},
	},
	{
		Code:        CacheStorageUsageDetectedCode,
		Title:       "Cache Storage Usage Detection Report",
		Description: "This report documents the detection of Cache Storage usage on specific pages of the application. Cache Storage is part of the Service Worker API and allows web applications to store and manage resources, such as files and data, in an efficient, versioned cache. Utilizing Cache Storage can significantly enhance performance by reducing load times and providing offline content access. However, improper management of cache storage can lead to security vulnerabilities, such as stale or sensitive data being inadvertently cached.",
		Remediation: "While this report is primarily for informational purposes, it is recommended to periodically review the contents and management strategies of cache storage to ensure data integrity and security. Developers should implement and enforce policies for cache expiration and data sanitation to prevent leakage of sensitive information. Regular security audits should be performed to ensure that cached data does not expose the application to additional attack vectors.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage",
		},
	},
	{
		Code:        CdnDetectedCode,
		Title:       "CDN Detection Report",
		Description: "A Content Delivery Network (CDN) has been detected for the target application. This could indicate enhanced performance and additional security layers.",
		Remediation: "No remediation steps are required, as this report is intended for informational purposes only.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Glossary/CDN",
			"https://www.cloudflare.com/learning/cdn/what-is-a-cdn/",
		},
	},
	{
		Code:        CertificateErrorsCode,
		Title:       "Certificate Errors",
		Description: "This report aggregates and highlights events related to security certificate errors within the applicationificate. These events are reported automatically by the browser and typically indicate problems with SSL/TLS certificates, such as expiration, misconfiguration, or untrusted issuers, which can undermine the security of communications and erode user trust.",
		Remediation: "Address certificate-related issues promptly to maintain secure, encrypted channels for user communications. Verify that all certificates are up-to-date, properly configured, and issued by a trusted Certificate Authority (CA). Implement automated alerts and renewals for certificates to avoid expirations. Consider using tools for continuous monitoring and validation of certificate status across your digital assets.",
		Cwe:         295,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-community/controls/Certificate_and_Public_Key_Pinning",
			"https://letsencrypt.org/docs/certificate-errors/",
		},
	},
	{
		Code:        CiCdInfrastructureFileDetectedCode,
		Title:       "Exposed CI/CD or Infrastructure Configuration File Detected",
		Description: "A CI/CD or infrastructure configuration file has been detected that is publicly accessible. These files often contain sensitive information, such as environment configurations, deployment instructions, and secrets. Exposing such files can reveal information about the system's setup, deployment processes, or even provide credentials for unauthorized access.\n\nPotential risks include:\n- Disclosure of sensitive environment variables or API keys\n- Exposure of deployment and configuration steps that allow attackers to understand system architecture\n- Leakage of credentials for cloud providers or other services\n\nIt is recommended to review the file content to assess its sensitivity and the security impact of exposure.\n",
		Remediation: "Secure access to CI/CD and infrastructure configuration files by:\n- Restricting public access to these files using server configurations\n- Ensuring sensitive information such as environment variables and secrets are stored securely in vaults\n- Regularly auditing access controls and monitoring for unintended exposure of configuration files\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://cheatsheetseries.owasp.org/cheatsheets/CI_CD_Security_Cheat_Sheet.html",
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
		},
	},
	{
		Code:        ClientSidePrototypePollutionCode,
		Title:       "Client-Side Prototype Pollution Detected",
		Description: "The application appears to be vulnerable to Client-Side Prototype Pollution (CSPP) attacks. This vulnerability occurs when the application processes user-supplied input with the JavaScript function `Object.assign()`, or uses it to clone an object. An attacker can inject properties into object prototypes, potentially leading to a variety of impacts, including denial-of-service, alteration of script behavior, or cross-site scripting (XSS) if the polluted properties are used in a DOM context.",
		Remediation: "To mitigate this vulnerability, avoid using the `Object.assign()` function with user-supplied input. If user input must be used, ensure it is thoroughly validated and sanitized first. Implement proper input validation and sanitization procedures. Also, be aware of how your client-side code handles object properties and ensure that all code which reads from object properties handles unexpected values correctly.",
		Cwe:         20,
		Severity:    "Low",
		References: []string{
			"https://portswigger.net/web-security/prototype-pollution/client-side",
			"https://book.hacktricks.xyz/pentesting-web/deserialization/nodejs-proto-prototype-pollution/client-side-prototype-pollution",
		},
	},
	{
		Code:        CloudDetectedCode,
		Title:       "Cloud Service Detection Report",
		Description: "The target application is hosted on a cloud service, which could be indicative of specific security configurations or vulnerabilities.",
		Remediation: "No remediation steps are required, as this report is intended for informational purposes only.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://cloud.hacktricks.xyz/pentesting-cloud/pentesting-cloud-methodology",
		},
	},
	{
		Code:        ConsoleUsageDetectedCode,
		Title:       "Console Usage Detection Report",
		Description: "This report identifies instances of console usage within the application. Console logs are often used for debugging purposes and can inadvertently expose sensitive information in the JavaScript code that is accessible to end users through the browser's developer tools. This exposure can pose security risks if logs contain data like user tokens, passwords, or other sensitive details.",
		Remediation: "To mitigate the risks associated with console log usage, developers should remove or mask console logs before deploying applications to production. Implement a logging strategy that directs sensitive or debug-level information to secure, server-side logs instead of client-facing consoles. Use environment-based conditional logging to ensure that detailed logs are only available during development or testing phases and not in production.",
		Cwe:         532,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/API/console/log_static",
			"https://cheatsheetseries.owasp.org/cheatsheets/Logging_Cheat_Sheet.html",
		},
	},
	{
		Code:        CorsCode,
		Title:       "Cross Origin Resource Sharing (CORS)",
		Description: "The application has misconfigured Cross-Origin Resource Sharing (CORS) policies, potentially allowing unauthorized domains access to sensitive data.",
		Remediation: "Ensure that the CORS policies are properly configured to only allow trusted domains to access resources. In many cases, it is advisable to use a whitelist approach where only specifically allowed domains are permitted access.",
		Cwe:         942,
		Severity:    "Medium",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",
			"https://book.hacktricks.xyz/pentesting-web/cors-bypass",
		},
	},
	{
		Code:        CrlfInjectionCode,
		Title:       "CRLF Injection Detected",
		Description: "The application appears to be vulnerable to CRLF (Carriage Return Line Feed) injection attacks. This vulnerability occurs when the application does not properly sanitize user-supplied input that is then used in HTTP headers. An attacker can exploit this vulnerability to manipulate HTTP headers and control the HTTP response body, potentially leading to HTTP response splitting, session hijacking, cross-site scripting (XSS) attacks, or other injection attacks.",
		Remediation: "To mitigate this vulnerability, sanitize and validate all user-supplied inputs that are incorporated into HTTP headers. Remove or escape CRLF sequences and other control characters. Use allowlists of acceptable inputs, rather than denylists of bad inputs. In addition, configure your web server to ignore or reject HTTP headers that contain CR or LF characters. Regular code reviews and penetration testing can help to identify and mitigate such issues.",
		Cwe:         93,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/CRLF_Injection",
		},
	},
	{
		Code:        CsrfCode,
		Title:       "Cross-Site Request Forgery Detected",
		Description: "The application appears to be vulnerable to Cross-Site Request Forgery (CSRF) attacks. This vulnerability occurs when the application allows an attacker to trick an authenticated user into performing an unwanted action without their consent. An attacker can exploit this vulnerability to carry out actions with the same permissions as the victim, potentially leading to unauthorized data access, data loss, or account compromise.",
		Remediation: "To mitigate this vulnerability, ensure that the application uses anti-CSRF tokens in every form or state changing request. These tokens should be tied to a user's session and included in every form or AJAX request that might result in a change of state for the user's data or settings. Also, make sure the application checks for the presence and correctness of this token before processing any such requests.",
		Cwe:         352,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/csrf",
			"https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html",
		},
	},
	{
		Code:        CstiCode,
		Title:       "Client-Side Template Injection",
		Description: "The application appears to be vulnerable to Client-Side Template Injection (CSTI). This vulnerability occurs when an attacker manipulates client-side templating engines by injecting malicious content into templates. Such actions can lead to Cross-Site Scripting (XSS) and other client-side vulnerabilities. This typically arises from the application dynamically inserting untrusted data into templates without adequate sanitization or validation.",
		Remediation: "To mitigate CSTI vulnerabilities, ensure all user input is thoroughly sanitized before being processed by client-side templating engines. Employ Content Security Policy (CSP) headers to lessen the impact of any successful injections. Opt for templating libraries that automatically handle encoding and escaping of user-supplied data. Regularly perform code audits to identify and secure potential injection points.",
		Cwe:         116,
		Severity:    "High",
		References: []string{
			"https://book.hacktricks.xyz/pentesting-web/client-side-template-injection-csti",
			"https://ryhanson.com/angular-expression-injection-walkthrough/",
			"https://portswigger.net/research/xss-without-html-client-side-template-injection-with-angularjs",
		},
	},
	{
		Code:        DatabaseErrorsCode,
		Title:       "Database Errors Detected",
		Description: "The application exposes database errors, which can leak sensitive information about the database setup and potentially the structure of the underlying data model. This could be valuable information for an attacker looking to exploit the application.",
		Remediation: "Avoid exposing database errors publicly. Consider implementing a global exception handler that can catch any unhandled exceptions and return a generic error message to the user. Detailed error information should be logged for debugging, but should not be exposed to the user or over insecure channels. Regular code reviews and penetration testing can help to identify and mitigate such issues.",
		Cwe:         209,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        DbConnectionStringsCode,
		Title:       "Database Connection Strings Detected",
		Description: "The application exposes database connection strings, which can provide sensitive information about the database setup, including credentials.",
		Remediation: "Avoid exposing database connection strings publicly to mitigate potential information leakage.",
		Cwe:         200,
		Severity:    "High",
		References: []string{
			"https://en.wikipedia.org/wiki/Connection_string",
			"https://www.connectionstrings.com/",
		},
	},
	{
		Code:        DbManagementInterfaceDetectedCode,
		Title:       "Database Management Interface Detected",
		Description: "A database management interface has been detected. While the presence of these interfaces \nalone does not indicate a vulnerability, they should be reviewed to ensure they are:\n\n1. Intentionally exposed\n2. Properly secured\n3. Necessary in the current environment\n\nThis finding requires manual verification to determine if it poses any security risk.\n",
		Remediation: "If this interface is intentionally exposed:\n- Verify it requires proper authentication\n- Ensure access is restricted to necessary users/IPs\n- Confirm HTTPS is enabled if accessible from the internet\n\nIf this interface is not meant to be exposed, remove it from the production environment and/or restrict access using firewall rules\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/01-Test_Network_Infrastructure_Configuration",
		},
	},
	{
		Code:        DirectoryListingCode,
		Title:       "Directory Listing Enabled",
		Description: "The application allows directory listings, which could expose sensitive files or information to attackers.",
		Remediation: "Disable directory listings to prevent unauthorized access to file listings.",
		Cwe:         548,
		Severity:    "Low",
		References: []string{
			"https://wiki.owasp.org/index.php/OWASP_Periodic_Table_of_Vulnerabilities_-_Directory_Indexing",
		},
	},
	{
		Code:        DjangoDebugExceptionCode,
		Title:       "Django Debug Page Exception Detected",
		Description: "The application is running in Django's debug mode, which could expose sensitive information or debugging data.",
		Remediation: "Ensure the application is running in production mode to prevent the exposure of sensitive information.",
		Cwe:         215,
		Severity:    "Medium",
		References: []string{
			"https://docs.djangoproject.com/en/stable/ref/settings/#debug",
		},
	},
	{
		Code:        DockerApiDetectedCode,
		Title:       "Docker API Detected",
		Description: "A Docker API endpoint has been detected. The severity and impact of this finding depends on:\n\n- The level of access available (authenticated/unauthenticated)\n- The exposed API endpoints and their functionality\n- Whether the access is read-only or allows modifications\n- The configuration of the Docker daemon\n\nPotential exposure through this API could include:\n- Container management capabilities\n- Host system information\n- Container filesystem access\n- Container environment variables\n- Network configuration details\n- Image and volume information\n- Resource usage metrics\n\nManual review is recommended to determine the exact access level and potential security impact.\nThe presence of an exposed Docker API does not automatically indicate a critical vulnerability,\nbut should be thoroughly investigated.\n",
		Remediation: "Review the exposed Docker API:\n- Verify if authentication is properly configured\n- Review network access controls\n- Ensure TLS is properly implemented\n- Audit exposed functionality and information\n- Consider restricting to localhost if remote access is not required\n",
		Cwe:         284,
		Severity:    "Info",
		References: []string{
			"https://docs.docker.com/engine/security/",
			"https://docs.docker.com/engine/api/",
			"https://docs.docker.com/engine/security/protect-access/",
			"https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html",
		},
	},
	{
		Code:        DomStorageEventsDetectedCode,
		Title:       "DOM Storage Events Detection Report",
		Description: "This report identifies the detection of DOM Storage events on a specific page of the application. DOM Storage, including LocalStorage and SessionStorage, allows websites to store data in the user's browser. Monitoring these storage events can provide insights into how data is stored and managed by the application, which may indicate potential security concerns or privacy issues if sensitive data is handled improperly.",
		Remediation: "No specific remediation steps are required as this report serves purely informational purposes. However, it is recommended to review the usage of DOM Storage to ensure that sensitive information is not being stored insecurely or without proper encryption. Regular audits and compliance checks should be conducted to ensure that data storage practices adhere to relevant data protection standards and regulations.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMStorage",
			"https://portswigger.net/web-security/dom-based/html5-storage-manipulation",
		},
	},
	{
		Code:        ElmahExposedCode,
		Title:       "ASP.NET ELMAH Handler Exposed",
		Description: "An exposed ASP.NET ELMAH (Error Logging Modules and Handlers) interface has been detected.\nThis debug interface reveals detailed error information including stack traces, server variables,\nand application state. When accessible, it can expose sensitive technical details about the\napplication's internal structure and runtime state that could aid in crafting attacks.\n",
		Remediation: "1. Restrict access to ELMAH through proper authentication\n2. Move error logging to a secure location\n3. Use secure logging alternatives in production\n4. Review logs for sensitive data exposure\n5. Implement secure error handling\n",
		Cwe:         215,
		Severity:    "Medium",
		References: []string{
			"https://blog.elmah.io/elmah-security-and-allowremoteaccess-explained/",
			"https://elmah.github.io/a/securing-error-log-pages/",
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
		},
	},
	{
		Code:        EmailAddressesCode,
		Title:       "Email Addresses Detected",
		Description: "The application exposes email addresses, potentially making users or administrators targets for spam or phishing attacks.",
		Remediation: "Avoid displaying email addresses publicly, or use techniques to obfuscate them to make it harder for automated tools to collect them.",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
		},
	},
	{
		Code:        EnvironmentFileExposedCode,
		Title:       "Environment Configuration File Exposed",
		Description: "An environment configuration file (.env) has been found exposed on the server.\nThese files typically contain sensitive information such as database credentials,\nAPI keys, tokens, and other application secrets that are used to configure the\napplication's environment. Exposure of these files can lead to unauthorized\naccess to connected services and data breaches. The severity of this issue needs to \nbe manually reviewed and assessed based on the sensitivity of the exposed information.\n",
		Remediation: "1. Remove all environment files from publicly accessible directories\n2. Use proper configuration management for different environments\n3. Implement server-side rules to block access to dotfiles\n4. Review application logs for potential unauthorized access\n5. Rotate any exposed credentials immediately\n",
		Cwe:         527,
		Severity:    "Critical",
		References: []string{
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
			"https://dotenvx.com/docs/env-file",
			"https://securinglaravel.com/security-tip-protect-your-env-file/",
		},
	},
	{
		Code:        EsiDetectedCode,
		Title:       "Edge Side Includes (ESI) Detection",
		Description: "The application appears to support Edge Side Includes (ESI), although this does not necessarily indicate a vulnerability. ESI can, however, be leveraged in certain scenarios if not properly secured.",
		Remediation: "Monitor and review the usage of ESI within the application. Ensure that its implementation does not expose sensitive data or functionalities.",
		Cwe:         918,
		Severity:    "Info",
		References: []string{
			"https://en.wikipedia.org/wiki/Edge_Side_Includes",
			"https://www.w3.org/TR/esi-lang/",
		},
	},
	{
		Code:        EsiInjectionCode,
		Title:       "Edge Side Includes (ESI) Injection",
		Description: "The application does not properly sanitize user input, potentially allowing for Edge Side Includes (ESI) injection attacks. This can be exploited to perform actions such as Server Side Request Forgeries (SSRF) or disclose sensitive information.",
		Remediation: "Ensure all user-supplied input is properly sanitized before being processed by the application. Avoid dynamically constructing ESI tags based on user input.",
		Cwe:         74,
		Severity:    "High",
		References: []string{
			"https://www.gosecure.net/blog/2018/04/03/beyond-xss-edge-side-include-injection/",
			"https://en.wikipedia.org/wiki/Edge_Side_Includes",
			"https://www.w3.org/TR/esi-lang/",
		},
	},
	{
		Code:        ExposedApiCredentialsCode,
		Title:       "Exposed API Credentials Detected",
		Description: "The application appears to have API credentials exposed. This vulnerability occurs when API keys, tokens or other forms of credentials are unintentionally exposed within the application, which could allow an attacker to misuse these credentials to gain unauthorized access or perform actions on behalf of the application.",
		Remediation: "To mitigate this vulnerability, ensure that API credentials are securely stored and not embedded in the code directly. Environment variables or secure credential storage should be used. Make sure to not commit these credentials in the version control system. If these exposed credentials have been used, consider them compromised and replace them immediately.",
		Cwe:         798,
		Severity:    "High",
		References: []string{
			"https://support.google.com/googleapi/answer/6310037?hl=en",
		},
	},
	{
		Code:        ExposedAxis2EndpointCode,
		Title:       "Exposed Apache Axis2 Service/Admin Interface",
		Description: "An exposed Apache Axis2 endpoint was discovered. Axis2 is a web services/SOAP framework, and its administrative \ninterfaces and service endpoints can reveal sensitive information about the application's web services. \nWhen exposed, these endpoints may allow:\n\n- Enumeration of all available web services\n- Access to service descriptions and WSDLs\n- View of system configuration details\n- Access to administrative functions\n- Potential manipulation of service configurations\n- Information disclosure about the internal service structure\n",
		Remediation: "1. Remove or disable Axis2 admin interface in production\n2. If admin interface is required:\n   - Restrict access by IP\n   - Implement strong authentication\n   - Ensure strong credentials are used\n3. Configure service security:\n   - Enable WS-Security where needed\n   - Restrict WSDL access to authenticated users\n   - Remove detailed error messages\n",
		Cwe:         749,
		Severity:    "High",
		References: []string{
			"https://axis.apache.org/axis2/java/core/index.html",
			"https://axis.apache.org/axis2/java/core/docs/security-module.html",
			"https://owasp.org/www-project-web-security-testing-guide/stable/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/",
		},
	},
	{
		Code:        ExposedCloudMetadataCode,
		Title:       "Cloud Instance Metadata Service Endpoint Detected",
		Description: "The application exposes a cloud instance metadata service endpoint. Instance metadata services provide \ninformation about cloud instances including instance identifiers, network configuration, and potentially \nsensitive data or credentials. Access to these endpoints should be carefully reviewed as exposure could \nlead to information disclosure or, in cases where credentials are exposed, facilitate unauthorized access \nto cloud resources.\n",
		Remediation: "Configure network security controls to restrict access to metadata service endpoints. This may include \nfirewall rules, network security groups, or proxy configurations. Additionally, ensure the latest \nmetadata service version is in use as newer versions provide improved security controls.\n",
		Cwe:         200,
		Severity:    "High",
		References: []string{
			"https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/configuring-instance-metadata-service.html",
			"https://cloud.google.com/compute/docs/storing-retrieving-metadata",
			"https://learn.microsoft.com/en-us/azure/virtual-machines/instance-metadata-service",
			"https://www.nccgroup.com/us/about-us/newsroom-and-events/blog/2020/november/protecting-against-cloud-metadata-exposure/",
		},
	},
	{
		Code:        ExposedJolokiaEndpointCode,
		Title:       "Exposed HTTP JMX Endpoint (Jolokia)",
		Description: "An exposed HTTP JMX endpoint (likely Jolokia) was discovered. Jolokia is a JMX-HTTP bridge that provides \nREST-like access to JMX MBeans, exposing detailed information about the Java application's internals. \nWhen exposed, these endpoints allow access to sensitive runtime information and potentially dangerous \noperations.\n\nAccess to these endpoints could reveal:\n- Memory usage and system properties\n- Thread and class loading information\n- Runtime configuration values\n- Application metrics and internal state\n- Application server details\n",
		Remediation: "1. If Jolokia is not required, disable it completely\n2. If needed, implement proper access controls:\n   - Restrict access to trusted IPs only\n   - Enable authentication\n   - Configure CORS properly\n3. Use Spring Security or similar to protect the endpoints\n4. Review and restrict accessible MBean operations\n",
		Cwe:         749,
		Severity:    "High",
		References: []string{
			"https://jolokia.org/reference/html/manual/security.html",
			"https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html#actuator.endpoints.exposing",
			"https://cwe.mitre.org/data/definitions/749.html",
		},
	},
	{
		Code:        ExposedLogFileCode,
		Title:       "Exposed Log File Detected",
		Description: "The application exposes log files that are publicly accessible. Log files often contain sensitive information that could aid attackers in compromising the system, such as:\n\n- Stack traces revealing application structure and technology details\n- Internal system paths and configurations\n- Debug information and error messages\n- API keys, credentials, or session tokens\n- User data or business logic details\n- Database queries or backend system information\n\nThe actual severity of this finding depends on the contents of the exposed logs and requires manual review to determine the full impact.\n",
		Remediation: "1. Move log files outside of the web root directory\n2. Configure web server rules to block access to log files and directories\n3. Implement proper authentication for any logging endpoints\n4. Review log contents to ensure sensitive data is not being logged\n",
		Cwe:         532,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/06-Test_HTTP_Methods",
			"https://cwe.mitre.org/data/definitions/532.html",
			"https://www.owasp.org/index.php/Logging_Cheat_Sheet",
		},
	},
	{
		Code:        ExposedPrometheusMetricsCode,
		Title:       "Exposed Prometheus Metrics Endpoint",
		Description: "An exposed Prometheus metrics endpoint has been detected. This endpoint provides detailed \noperational metrics about the application and system, which could provide attackers with\nvaluable information about the infrastructure and application behavior.\n\nThe exposed metrics may include:\n- System resource usage (CPU, memory, disk)\n- Application performance metrics\n- Request counts and latencies\n- Runtime statistics\n- Database connection information\n- Custom business metrics\n- Internal paths and endpoints\n- Container and orchestration details\n",
		Remediation: "To secure the application:\n- Restrict access to the metrics endpoint using authentication\n- Configure network-level access controls\n- Move metrics endpoint to a separate management port\n- Review exposed metrics to ensure no sensitive data is leaked\n- Consider using a dedicated metrics aggregator\n",
		Cwe:         497,
		Severity:    "Medium",
		References: []string{
			"https://prometheus.io/docs/operating/security/",
			"https://prometheus.io/docs/practices/naming/",
			"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration",
		},
	},
	{
		Code:        ExposedSpringActuatorEndpointsCode,
		Title:       "Exposed Spring Boot Actuator Endpoints",
		Description: "Spring Boot Actuator endpoints have been detected on the application. These endpoints expose sensitive \noperational information and functionality about the application, including environment variables, \nconfiguration settings, health metrics, and potentially confidential system details. \n\nThe exposed endpoints may reveal:\n- Environment variables and system properties\n- Application configuration details\n- Database credentials and connection strings\n- Third-party service configurations\n- Application health and metrics\n- Thread dumps and heap information\n- Internal dependency information\n- Logging configurations\n\nThis information could be leveraged by attackers to gather intelligence about the application,\nmanipulate its behavior, or gain unauthorized access to sensitive information.\n",
		Remediation: "To secure the application:\n- Disable all non-essential actuator endpoints\n- Move actuator endpoints to a separate management port\n- Implement strict access controls and authentication for actuator endpoints\n- Configure appropriate network-level restrictions\n- Review and monitor actuator endpoint access logs\n",
		Cwe:         497,
		Severity:    "High",
		References: []string{
			"https://docs.spring.io/spring-boot/docs/current/reference/html/actuator.html",
			"https://www.baeldung.com/spring-boot-actuators",
			"https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration",
		},
	},
	{
		Code:        FileUploadDetectedCode,
		Title:       "File Upload Detected",
		Description: "The application allows file uploads, which can expose it to various security vulnerabilities if not properly managed.",
		Remediation: "Ensure that file upload functionality is secured, including validating/sanitizing uploaded files, setting proper file permissions, and storing files in a secure location.",
		Cwe:         434,
		Severity:    "Info",
		References: []string{
			"https://book.hacktricks.xyz/pentesting-web/file-upload",
			"https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html",
		},
	},
	{
		Code:        FlashUsageDetectedCode,
		Title:       "Adobe Flash Usage Detected",
		Description: "The application appears to be using Adobe Flash technology, which has reached end-of-life status\nas of December 31, 2020. Flash is no longer supported by Adobe or any major web browsers, and\nits continued use poses significant security risks. Flash applications can no longer receive\nsecurity updates, making them vulnerable to known exploits and potential attack vectors.\nAdditionally, most users will be unable to run Flash content as modern browsers have completely\nremoved Flash support.\n",
		Remediation: "To address this security concern:\n1. Identify all Flash content and functionality in your application\n2. Plan a migration strategy to modern web technologies:\n   - Use HTML5 <video> and <audio> elements for media playback\n   - Replace Flash animations with CSS animations or JavaScript\n   - Use HTML5 Canvas or WebGL for interactive graphics\n   - Consider frameworks like Three.js for 3D content\n   - Use modern JavaScript frameworks for interactive applications\n3. Remove all Flash-related code and content from your application\n4. Update any documentation or user guides that reference Flash functionality\n5. Consider implementing browser warnings for legacy users who might still have Flash content cached\n",
		Cwe:         477,
		Severity:    "High",
		References: []string{
			"https://www.adobe.com/products/flashplayer/end-of-life-alternative.html",
			"https://blogs.windows.com/msedgedev/2020/09/04/update-adobe-flash-end-support/",
			"https://en.wikipedia.org/wiki/Adobe_Flash_Player",
		},
	},
	{
		Code:        ForbiddenBypassCode,
		Title:       "Forbidden Bypass (401/403)",
		Description: "The application fails to properly enforce access restrictions, allowing attackers to bypass 401 Unauthorized or 403 Forbidden responses. This vulnerability can lead to unauthorized access to protected resources.",
		Remediation: "Ensure strict access controls are in place and effectively enforced. Audit and review all endpoints that return 401 or 403 responses to validate their security against bypass attempts.",
		Cwe:         285,
		Severity:    "High",
		References: []string{
			"https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
			"https://book.hacktricks.xyz/network-services-pentesting/pentesting-web/403-and-401-bypasses",
			"https://blog.vidocsecurity.com/blog/401-and-403-bypass-how-to-do-it-right",
		},
	},
	{
		Code:        GrailsExceptionCode,
		Title:       "Grails Runtime Exception Detected",
		Description: "The application exposes Grails runtime exceptions, which could provide an attacker with valuable system information.",
		Remediation: "Configure the application to not expose detailed error messages to end users.",
		Cwe:         209,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        GraphqlIntrospectionEnabledCode,
		Title:       "GraphQL Introspection Enabled",
		Description: "GraphQL introspection is enabled on this endpoint. Introspection allows clients to query information about the API schema, including available queries, mutations, types, and fields.\n\nWhile introspection is a standard GraphQL feature commonly used for documentation and development, it provides detailed information about the API structure that could be unnecessary or undesirable in some production environments.\n\nWhen enabled, introspection allows clients to:\n- Query the complete schema structure\n- View available operations and types\n- Access field descriptions and documentation\n- See deprecation notices",
		Remediation: "Review whether introspection is necessary for your use case. If not required, consider disabling it in production. If introspection is needed, ensure that all exposed queries, mutations, and fields are intended to be discoverable and do not expose sensitive operations or data structures.",
		Cwe:         200,
		Severity:    "Low",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL",
			"https://graphql.org/learn/introspection/",
		},
	},
	{
		Code:        GraphqlEndpointDetectedCode,
		Title:       "GraphQL Endpoint Detected",
		Description: "A GraphQL API endpoint has been identified in the application. While GraphQL itself is not a security vulnerability, \nits presence warrants attention as GraphQL endpoints can potentially expose excessive data or functionality if not \nproperly secured. GraphQL APIs may be vulnerable to issues such as information disclosure through introspection, \nresource exhaustion through nested queries, or insufficient access controls.\n",
		Remediation: "To secure the GraphQL endpoint:\n1. Disable introspection in production unless explicitly required\n2. Implement query depth limiting to prevent recursive query attacks\n3. Add appropriate rate limiting and timeout mechanisms\n4. Ensure proper authentication and authorization controls are in place\n5. Validate all input parameters\n6. Consider implementing persisted queries to restrict allowed operations\n7. Monitor and log GraphQL operations for suspicious patterns\n8. Use query cost analysis to prevent resource exhaustion\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/12-API_Testing/01-Testing_GraphQL",
			"https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html",
			"https://graphql.org/learn/best-practices/",
		},
	},
	{
		Code:        GrpcEndpointDetectedCode,
		Title:       "HTTP-based gRPC Endpoint Detected",
		Description: "A gRPC endpoint exposed over HTTP has been identified in the application. This includes either gRPC-Web (HTTP/1.1) \nor standard gRPC over HTTP/2. While exposing gRPC services over HTTP allows for broader client compatibility, especially \nwith web browsers via gRPC-Web, these endpoints should be reviewed as they may provide access to sensitive API \nfunctionality or service metadata through reflection capabilities.\n",
		Remediation: "To secure the HTTP-exposed gRPC endpoint:\n1. Disable reflection service in production unless explicitly required\n2. Implement proper authentication and authorization\n3. Use TLS for all gRPC communications\n4. Configure appropriate CORS policies if using gRPC-Web\n5. Implement rate limiting and timeout mechanisms\n6. Monitor and log gRPC operations\n7. Consider using a API gateway for additional security controls\n8. Disable health checking endpoints in production if not needed\n9. Review and restrict exposed services and methods\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://grpc.io/docs/what-is-grpc/core-concepts/",
			"https://github.com/grpc/grpc-web",
			"https://grpc.io/docs/guides/auth/",
			"https://book.hacktricks.xyz/pentesting-web/grpc-web-pentest",
		},
	},
	{
		Code:        HeaderInsightsReportCode,
		Title:       "Header Insights Report",
		Description: "This report offers a comprehensive overview of the HTTP headers used by the application. While HTTP headers can provide important information about security controls, technology stacks, and other aspects, this report is intended for informational purposes and is not indicative of security vulnerabilities.",
		Remediation: "No remediation steps are required, as this report is intended for informational purposes. However, the insights can be valuable for understanding the application's behavior, debugging issues, or for future security assessments.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers",
			"https://owasp.org/www-project-secure-headers/",
		},
	},
	{
		Code:        HostHeaderInjectionCode,
		Title:       "Host Header Injection",
		Description: "The application appears to be vulnerable to Host Header Injection. This vulnerability occurs when a user is able to manipulate the Host header and the application trusts the header without proper validation. This can lead to vulnerabilities such as web cache poisoning, password reset poisoning, and malicious redirections.",
		Remediation: "To mitigate this vulnerability, validate and sanitize incoming Host headers. Use a whitelist of allowed domains and hostnames. Ensure that the application generates absolute URLs using a known good base URL, rather than relying on the incoming Host header. Additionally, implement proper logging of incorrect Host header attempts and regularly review for suspicious activities.",
		Cwe:         601,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/17-Testing_for_Host_Header_Injection",
			"https://portswigger.net/web-security/host-header",
		},
	},
	{
		Code:        Http2DetectedCode,
		Title:       "HTTP/2 Protocol in Use",
		Description: "The application has been detected using the HTTP/2 protocol. While HTTP/2 provides significant benefits in performance and features, like header compression, multiplexing, and prioritization, it's not without some HTTP/2 specific vulnerabilities such as certain request smuggling techniques.",
		Remediation: "Ensure that the server appropriately announces its support for HTTP/2 and that the HTTP/2 implementation adheres to best practices. Keep server software or supporting libraries updated to receive the latest security patches.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://portswigger.net/research/http2",
			"https://tools.ietf.org/html/rfc7540",
			"https://developers.google.com/web/fundamentals/performance/http2",
		},
	},
	{
		Code:        Http3DetectedCode,
		Title:       "HTTP/3 Protocol in Use",
		Description: "The application is utilizing the HTTP/3 protocol. HTTP/3, the successor to HTTP/2, offers performance enhancements and operates over the QUIC transport protocol, which aims to improve upon the shortcomings of TCP. This includes benefits like reduced latency and better congestion control. However, as with any protocol, incorrect implementations or configurations can introduce vulnerabilities specific to HTTP/3 and QUIC.",
		Remediation: "Ensure the server signals its support for HTTP/3 correctly and that the HTTP/3 and QUIC implementations align with best practices. Regularly update server software or libraries that handle HTTP/3 to incorporate the latest security improvements.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://www.cloudflare.com/learning/performance/what-is-http3/",
			"https://www.rfc-editor.org/rfc/rfc9114.html",
			"https://portswigger.net/research/http-3-connection-contamination",
		},
	},
	{
		Code:        HttpMethodsCode,
		Title:       "HTTP Methods",
		Description: "The application allows the use of potentially dangerous HTTP methods.",
		Remediation: "Make sure the HTTP Methods are properly configured and only the necessary ones are allowed.",
		Cwe:         20,
		Severity:    "Low",
		References:  []string{},
	},
	{
		Code:        IdorCode,
		Title:       "Insecure Direct Object Reference (IDOR) Detected",
		Description: "The application appears to be vulnerable to Insecure Direct Object References (IDOR). This vulnerability occurs when an attacker can access or modify objects (e.g., database records, files) directly by manipulating input parameters, such as URLs or form fields, without proper authorization checks. IDOR can lead to unauthorized data disclosure, data tampering, or other unintended actions.",
		Remediation: "To mitigate this vulnerability, implement proper access controls for all application objects. Ensure that each request for a specific object is accompanied by an authorization check to determine if the user has the necessary permissions to access or modify the object. Use indirect references, like session-based mappings, instead of direct object references in URLs or form fields. Regularly review application logs for suspicious activity and conduct thorough testing to identify potential IDOR vulnerabilities.",
		Cwe:         639,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References",
			"https://cheatsheetseries.owasp.org/cheatsheets/Insecure_Direct_Object_Reference_Prevention_Cheat_Sheet.html",
			"https://en.wikipedia.org/wiki/Insecure_direct_object_reference",
		},
	},
	{
		Code:        IncorrectContentTypeHeaderCode,
		Title:       "Incorrect Content Type Header",
		Description: "The application does not correctly specify the content type of the response, potentially leading to security vulnerabilities such as MIME sniffing attacks.",
		Remediation: "Always specify a correct 'Content-Type' header in the response. Use 'X-Content-Type-Options: nosniff' to prevent the browser from MIME-sniffing a response away from the declared content-type.",
		Cwe:         16,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        IndexeddbUsageDetectedCode,
		Title:       "IndexedDB Usage Detection Report",
		Description: "This report highlights the usage of IndexedDB on specific pages of the application. IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This allows web applications to store data persistently in a user's browser, and to function efficiently without an internet connection. Monitoring IndexedDB usage can provide insights into the application's data storage capabilities and potential areas where sensitive data might be stored or exposed.",
		Remediation: "No specific remediation steps are required as this report is intended for informational purposes only. It is advisable for developers and security teams to ensure that IndexedDB is used securely and in compliance with data protection standards. Data stored using IndexedDB should be encrypted if it contains sensitive or personal information. Regular security reviews and audits should be performed to validate data handling practices and to mitigate potential exposure risks.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",
			"https://www.researchgate.net/publication/259081595_An_Investigation_into_Possible_Attacks_on_HTML5_IndexedDB_and_their_Prevention",
		},
	},
	{
		Code:        JavaDeserializationCode,
		Title:       "Insecure Java Deserialization Detected",
		Description: "The application appears to be vulnerable to insecure Java deserialization attacks. This vulnerability arises when an application deserializes untrusted data without proper validation. An attacker can exploit this vulnerability to execute arbitrary code, bypass authentication, or perform other malicious activities.",
		Remediation: "To mitigate this vulnerability, avoid deserializing untrusted data. Use safe serialization libraries or frameworks that do not allow the execution of arbitrary code. Implement strong type-checking during deserialization and apply the principle of least privilege. Regularly update and patch Java libraries to protect against known deserialization exploits.",
		Cwe:         502,
		Severity:    "Critical",
		References: []string{
			"https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization",
			"https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html",
			"https://snyk.io/blog/serialization-and-deserialization-in-java/",
			"https://github.com/frohoff/ysoserial",
		},
	},
	{
		Code:        JavaSerializedObjectDetectedCode,
		Title:       "Java serialized object resonse detected",
		Description: "A java serialized object response has been detected, this would require further manual investigation to check for possible deserialization vulnerabilities",
		Remediation: "N/A",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://docs.oracle.com/javase/tutorial/jndi/objects/serial.html",
			"https://maxchadwick.xyz/blog/java-serialized-object-detection",
			"https://portswigger.net/web-security/deserialization/exploiting",
		},
	},
	{
		Code:        JavaServerHeaderCode,
		Title:       "Java Version Detected",
		Description: "The application's server response header discloses the version of Java in use. This could potentially provide valuable information to an attacker seeking to exploit a known vulnerability in the disclosed Java version.",
		Remediation: "Configure your server to not disclose software version information in its response headers. Alternatively, ensure your software versions are regularly updated to the latest versions, mitigating the risk of known vulnerabilities.",
		Cwe:         200,
		Severity:    "Low",
		References:  []string{},
	},
	{
		Code:        JettyServerHeaderCode,
		Title:       "Jetty Version Detected",
		Description: "The application's server response header discloses the version of Jetty in use. An attacker can exploit this information to target known vulnerabilities in the disclosed Jetty version.",
		Remediation: "Configure your server to not disclose software version information in its response headers. Alternatively, regularly update your Jetty version to the latest one to reduce the risk of known vulnerabilities.",
		Cwe:         200,
		Severity:    "Low",
		References:  []string{},
	},
	{
		Code:        JsonpEndpointDetectedCode,
		Title:       "JSONP Endpoint Detected",
		Description: "The application implements JSONP (JSON with Padding) functionality, which allows the response data to be wrapped in a \ncaller-specified callback function. While JSONP is a legitimate technique for bypassing the Same-Origin Policy to enable \ncross-origin data sharing, it can lead to security issues if not properly implemented. An attacker could potentially \nexploit JSONP endpoints to steal sensitive data by making the victim's browser request the JSONP endpoint with a \nspecially crafted callback function.\n",
		Remediation: "JSONP is inherently designed to bypass Same-Origin Policy restrictions, making it fundamentally unsuitable for endpoints \nthat handle sensitive data. The primary recommendation is to avoid using JSONP for any sensitive operations or data access.\n\nIf the endpoint must remain accessible cross-origin:\n1. Consider replacing JSONP with CORS (Cross-Origin Resource Sharing), which provides better security controls\n2. If JSONP must be maintained:\n   - Implement strict callback name validation using a whitelist of allowed function names\n   - Add proper authentication checks to prevent unauthorized access\n   - Set appropriate Cache-Control headers to prevent response caching\n   - Consider implementing token-based protection against CSRF attacks\n3. Evaluate if the endpoint really needs to be accessible cross-origin\n4. Document all JSONP endpoints and regularly review their necessity and security\n",
		Cwe:         939,
		Severity:    "Medium",
		References: []string{
			"https://en.wikipedia.org/wiki/JSONP",
			"https://securitycafe.ro/2017/01/18/practical-jsonp-injection/",
		},
	},
	{
		Code:        JwtDetectedCode,
		Title:       "JSON Web Token (JWT) Detected",
		Description: "The application appears to use JSON Web Tokens (JWT). If not properly secured, JWTs can lead to various security issues, including token-based authentication vulnerabilities and identity spoofing.",
		Remediation: "Ensure that JWTs are used securely. Implement proper validation and handling mechanisms. Consider using additional safeguards such as Token Binding, and never expose sensitive information in the payload of the JWT. Always verify the signature of incoming JWTs to confirm they were issued by your system.",
		Cwe:         347,
		Severity:    "Info",
		References: []string{
			"https://jwt.io/",
			"https://book.hacktricks.xyz/pentesting-web/hacking-jwt-json-web-tokens",
			"https://github.com/ticarpi/jwt_tool",
		},
	},
	{
		Code:        JwtWeakSigningSecretCode,
		Title:       "Weak Signing Secret in JWT",
		Description: "The application uses JSON Web Tokens (JWTs) for authentication, but the signing secret is weak or easily guessable. This vulnerability can allow attackers to perform brute force or dictionary attacks to discover the signing secret. If successful, attackers can generate or alter JWTs, leading to potential unauthorized access to the application's resources.",
		Remediation: "Use a strong, randomly generated signing secret with high entropy for JWTs. Avoid using short, simple, or common phrases as secrets. Opt for secure algorithms like HS256, RS256, or ES256 and ensure tokens have a short expiration time. Rotate signing secrets regularly and store them securely using environment variables or a secret management service.",
		Cwe:         347,
		Severity:    "High",
		References: []string{
			"https://jwt.io/introduction",
			"https://cheatsheetseries.owasp.org/cheatsheets/JSON_Web_Token_Cheat_Sheet_for_Java.html",
			"https://github.com/ticarpi/jwt_tool/wiki",
		},
	},
	{
		Code:        KubernetesApiDetectedCode,
		Title:       "Kubernetes API Detected",
		Description: "A Kubernetes API endpoint has been detected. The severity and impact of this finding depends on:\n\n- The level of access available (authenticated/unauthenticated)\n- The exposed API endpoints and their functionality\n- Whether the access is read-only or allows modifications\n- The sensitivity of exposed information\n\nPotential information exposure could include:\n- Pod and container details\n- Service configurations\n- Node information\n- Cluster configuration details\n- Internal network architecture\n\nManual review is recommended to determine the exact access level and potential security impact.\n",
		Remediation: "Review the exposed Kubernetes API:\n- Verify if authentication is properly configured\n- Ensure RBAC policies are implemented\n- Configure network policies appropriately\n- Review exposed information and functionality\n",
		Cwe:         284,
		Severity:    "Info",
		References: []string{
			"https://kubernetes.io/docs/concepts/security/",
			"https://kubernetes.io/docs/reference/access-authn-authz/authentication/",
			"https://kubernetes.io/docs/concepts/security/rbac-good-practices/",
		},
	},
	{
		Code:        LdapInjectionCode,
		Title:       "LDAP Injection Detected",
		Description: "LDAP (Lightweight Directory Access Protocol) injection is a vulnerability that occurs when an application incorporates user-supplied input into LDAP statements without proper sanitization. This allows attackers to modify the intended LDAP query, potentially leading to unauthorized access to the directory service. This vulnerability typically arises when applications use user input directly in constructing LDAP filters or Distinguished Names (DN) without proper validation or escaping of special characters. Attackers can manipulate these queries to bypass authentication, elevate privileges, or extract sensitive information from the directory service.",
		Remediation: "Use your framework's built-in LDAP escaping functions to properly escape special characters in user input before using it in LDAP queries. If no built-in function exists, escape and/or validate user input against a whitelist of allowed characters.",
		Cwe:         90,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/LDAP_Injection",
			"https://cheatsheetseries.owasp.org/cheatsheets/LDAP_Injection_Prevention_Cheat_Sheet.html",
		},
	},
	{
		Code:        Log4shellCode,
		Title:       "Log4Shell (Log4j Remote Code Execution)",
		Description: "The application uses a vulnerable version of Log4j that allows remote code execution.",
		Remediation: "Update Log4j to a patched version (2.15.0 or later).",
		Cwe:         502,
		Severity:    "Critical",
		References: []string{
			"https://logging.apache.org/log4j/2.x/security.html",
			"https://nvd.nist.gov/vuln/detail/CVE-2021-44228",
		},
	},
	{
		Code:        MissingContentTypeHeaderCode,
		Title:       "Missing Content Type Header",
		Description: "The application does not appear to be setting a content type in the response headers. This can lead to security vulnerabilities if the browser attempts to 'sniff' the MIME type, potentially leading to situations where content is interpreted and executed as a different type than intended. For example, an attacker might be able to trick a user's browser into interpreting a response body as HTML or JavaScript, leading to cross-site scripting vulnerabilities.",
		Remediation: "To mitigate this vulnerability, ensure that all responses include a Content-Type header that accurately reflects the type of content being returned. If the content type is not known in advance, 'application/octet-stream' can be used as a general fallback. Avoid using 'text/plain' as this can still be sniffed in some situations. In addition, setting the 'X-Content-Type-Options: nosniff' header will instruct the browser not to attempt to sniff the MIME type.",
		Cwe:         16,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options",
		},
	},
	{
		Code:        MixedContentCode,
		Title:       "Mixed Content",
		Description: "The application serves both secure (HTTPS) and insecure (HTTP) content, which may lead to some content being vulnerable to man-in-the-middle attacks.",
		Remediation: "Ensure all content is served over a secure connection. Use HTTPS for all resources and avoid linking to insecure (HTTP) resources.",
		Cwe:         16,
		Severity:    "Medium",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/Security/Mixed_content",
			"https://web.dev/articles/what-is-mixed-content",
		},
	},
	{
		Code:        NetworkAuthChallengeDetectedCode,
		Title:       "Network Authentication Challenge Detection",
		Description: "This report details instances where network authentication challenges (e.g., HTTP Basic Authentication, Digest Authentication) have been detected within the application. These authentication mechanisms prompt users to provide credentials to access certain network resources. While effective for simple authentication needs, these methods can expose credentials to risks if not used over secure connections or if implemented without additional security measures.",
		Remediation: "To address potential security concerns associated with basic or digest authentication challenges, ensure all authentication processes occur over HTTPS to protect credentials in transit. Consider upgrading to more secure authentication methods, such as OAuth or JWTs, which provide enhanced security features and better user experience. Regularly review and update authentication protocols to adhere to current security best practices and mitigate potential vulnerabilities.",
		Cwe:         303,
		Severity:    "Info",
		References: []string{
			"https://datatracker.ietf.org/doc/html/rfc2617",
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication",
		},
	},
	{
		Code:        NosqlInjectionCode,
		Title:       "NoSQL Injection Detected",
		Description: "The application appears to be vulnerable to NoSQL injection attacks. This vulnerability occurs when the application uses user-supplied input to construct NoSQL queries without properly sanitizing or validating the input first. An attacker can exploit this vulnerability to manipulate queries, potentially leading to unauthorized data access, data loss, or data corruption.",
		Remediation: "To mitigate this vulnerability, avoid constructing queries with user-supplied input whenever possible. Instead, use parameterized queries, which can help ensure that user input is not interpreted as part of the query. Implement proper input validation and sanitization procedures. Also, ensure that the least privilege principle is followed, and each function of the application has only the necessary access rights it needs to perform its tasks.",
		Cwe:         943,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.6-Testing_for_NoSQL_Injection",
			"https://book.hacktricks.xyz/pentesting-web/nosql-injection",
		},
	},
	{
		Code:        OauthEndpointDetectedCode,
		Title:       "OAuth/OpenID Configuration Endpoint Detected",
		Description: "An OAuth or OpenID Connect configuration endpoint was discovered. These endpoints \nprovide information about the OAuth/OIDC implementation, including authorization \nendpoints, token endpoints, and supported features. This finding requires manual \nreview to determine if sensitive information is inappropriately exposed.\n",
		Remediation: "Review the exposed OAuth/OIDC endpoints to ensure they only disclose necessary \ninformation for client operation. Consider restricting access to any configuration \nendpoints that aren't required for normal OAuth flows.\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://oauth.net/2/",
			"https://openid.net/connect/",
			"https://datatracker.ietf.org/doc/html/rfc8414",
		},
	},
	{
		Code:        OobCommunicationsCode,
		Title:       "Out of Band Communications",
		Description: "The application sends sensitive information to an external server.",
		Remediation: "Ensure all sensitive information is kept within the application and not sent to external servers.",
		Cwe:         201,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        OpenRedirectCode,
		Title:       "Open Redirect",
		Description: "The application appears to be vulnerable to open redirect attacks. This vulnerability occurs when an application accepts untrusted input that can cause the web application to redirect the request to a URL contained within untrusted input. This can be used in phishing attacks to redirect users to malicious sites.",
		Remediation: "Ensure that all redirection URLs are validated against a white-list of trusted URLs. Avoid using user-supplied input to determine the destination of redirection without validation. If user input is utilized, ensure it is properly sanitized and validated against expected inputs.",
		Cwe:         601,
		Severity:    "Medium",
		References: []string{
			"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html",
			"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/11-Client_Side_Testing/04-Testing_for_Client_Side_URL_Redirect",
			"https://learn.snyk.io/lesson/open-redirect/",
		},
	},
	{
		Code:        OpenapiDefinitionFoundCode,
		Title:       "OpenAPI (Swagger) Definition Found",
		Description: "An OpenAPI (formerly known as Swagger) specification document has been discovered. This document describes the structure and capabilities of the API, including available endpoints, parameters, authentication methods, and data schemas.\n\nWhen exposed, these documents provide:\n- Detailed API endpoint listings\n- Request/response schemas\n- Authentication requirements\n- Parameter specifications\n- Data models and relationships",
		Remediation: "Review whether exposing the API documentation is intended and ensure that all endpoints, parameters, and schemas described in the specification are implemented safely and meant to be discoverable. Consider restricting access if the documentation contains sensitive implementation details or exposes internal API endpoints.",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-api-security/",
			"https://swagger.io/docs/specification/authentication/",
			"https://swagger.io/specification/",
		},
	},
	{
		Code:        OsCmdInjectionCode,
		Title:       "OS Command Injection",
		Description: "The application allows the execution of arbitrary operating system commands.",
		Remediation: "Avoid using shell commands in application code. If unavoidable, use strongly typed parameter APIs to prevent injection.",
		Cwe:         78,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/Command_Injection",
			"https://book.hacktricks.xyz/pentesting-web/command-injection",
		},
	},
	{
		Code:        ParameterPollutionCode,
		Title:       "Parameter Pollution Detected",
		Description: "The application appears to be vulnerable to Parameter Pollution. This vulnerability occurs when the application does not properly validate or handle multiple instances of the same parameter. An attacker can exploit this by injecting additional parameters or by manipulating existing ones, potentially leading to a variety of impacts such as bypassing input validation, manipulating application logic, or accessing unauthorized data.",
		Remediation: "Ensure that the application properly handles, validates, and sanitizes all parameters. Implement strict rules for processing incoming parameters and reject any requests with unexpected or repeated parameters. Regularly review application logic to ensure consistent handling of parameters throughout the application.",
		Cwe:         235,
		Severity:    "Medium",
		References: []string{
			"https://en.wikipedia.org/wiki/HTTP_parameter_pollution",
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/04-Testing_for_HTTP_Parameter_Pollution",
			"https://book.hacktricks.xyz/pentesting-web/parameter-pollution",
			"https://securityintelligence.com/posts/how-to-prevent-http-parameter-pollution/",
		},
	},
	{
		Code:        PasswordFieldAutocompleteEnabledCode,
		Title:       "Password Field Autocomplete Enabled",
		Description: "The application's password fields have autocomplete enabled, which may pose a security risk by allowing password autofill on shared or public devices.",
		Remediation: "Disable autocomplete on password fields to prevent passwords from being stored and auto-filled by the browser.",
		Cwe:         200,
		Severity:    "Low",
		References: []string{
			"https://wiki.owasp.org/index.php/Testing_for_Vulnerable_Remember_Password_(OTG-AUTHN-005)",
		},
	},
	{
		Code:        PasswordInGetRequestCode,
		Title:       "Password Submitted in GET Request",
		Description: "The application allows users to submit passwords using the GET method in URLs, which poses a significant security risk. Passwords transmitted in URLs are easily exposed in browser history, server logs, and can be intercepted by attackers. This vulnerability could lead to unauthorized access to user accounts and compromise sensitive information.",
		Remediation: "To mitigate this vulnerability, never use the GET method to transmit sensitive data, including passwords. Use the POST method with HTTPS to ensure that data is not exposed in URLs and is encrypted during transmission. Additionally, review and sanitize server logs to prevent storing sensitive information and enforce strict guidelines for handling sensitive data transmission securely.",
		Cwe:         598,
		Severity:    "Low",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/Information_exposure_through_query_strings_in_url",
			"https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html",
		},
	},
	{
		Code:        PaymentTestEndpointDetectedCode,
		Title:       "Payment System Test Endpoint Detected",
		Description: "A payment system test endpoint has been discovered. These endpoints are typically used for testing payment \nintegrations and may expose test credentials, sandbox configurations, or payment system debugging interfaces. \nWhile test endpoints often use sandbox credentials, they might reveal information about the payment system \narchitecture or in some cases contain misconfigured production credentials.\n",
		Remediation: "Restrict access to payment test endpoints in production environments. Move test endpoints to separate \ntesting environments and ensure proper access controls are in place. Review exposed endpoints for sensitive \ninformation and verify that no production credentials are exposed.\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://stripe.com/docs/security/guide",
			"https://developer.paypal.com/api/rest/sandbox/",
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
		},
	},
	{
		Code:        PhpInfoDetectedCode,
		Title:       "PHPInfo Page Detected",
		Description: "A PHPInfo page was discovered on the server. The phpinfo() function outputs sensitive \ninformation about PHP's configuration including installed modules, server settings, \npaths, environment variables and configuration options. This information can be used \nby attackers to identify vulnerabilities and plan targeted attacks.\n",
		Remediation: "Remove or disable access to any files containing phpinfo() function calls from \nproduction environments. If needed for debugging, ensure these files are only \naccessible in development environments or protected by appropriate authentication.\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://www.php.net/manual/en/function.phpinfo.php",
		},
	},
	{
		Code:        PrivateIpsCode,
		Title:       "Private IPs Detected",
		Description: "The application exposes private IP addresses, which can provide useful information for potential attackers and expose the internal network structure.",
		Remediation: "Avoid exposing private IP addresses publicly to mitigate potential information leakage.",
		Cwe:         200,
		Severity:    "Low",
		References: []string{
			"https://en.wikipedia.org/wiki/Private_network",
			"https://datatracker.ietf.org/doc/html/rfc1918",
		},
	},
	{
		Code:        PrivateKeysCode,
		Title:       "Private Keys Detected",
		Description: "The application exposes private keys, which can provide crucial information for potential attackers and expose the system to unauthorized access.",
		Remediation: "Private keys must be kept confidential and should never be exposed or sent over insecure channels. If a private key has been exposed, it should be considered compromised and a new key pair should be generated.",
		Cwe:         522,
		Severity:    "High",
		References: []string{
			"https://en.wikipedia.org/wiki/Public-key_cryptography",
			"https://cheatsheetseries.owasp.org/cheatsheets/Key_Management_Cheat_Sheet.html",
		},
	},
	{
		Code:        ReflectedInputCode,
		Title:       "Input reflected in response",
		Description: "Input reflection arises when data originating from a user request is directly echoed back in the application's immediate response. While not inherently a vulnerability, it serves as a crucial step for several client-side vulnerabilities abd certain server-side vulnerabilities like SQL injection become more discernible and exploitable when input is echoed back in responses.",
		Remediation: "To avoid vulnerabilities raised due to input returned in response, implement robust input validation and output encoding mechanisms. Ensure that user-supplied data is thoroughly sanitized and validated before being echoed back in application responses. Employ context-aware encoding techniques to prevent various types of injection attacks and security misconfigurations.",
		Cwe:         20,
		Severity:    "Info",
		References: []string{
			"https://cheatsheetseries.owasp.org/cheatsheets/Input_Validation_Cheat_Sheet.html",
		},
	},
	{
		Code:        RemoteFileInclusionCode,
		Title:       "Remote File Inclusion Detected",
		Description: "The application appears to be vulnerable to Remote File Inclusion (RFI) attacks. This vulnerability occurs when the application uses user-supplied input to include remote files without properly sanitizing or validating the input first. An attacker can exploit this vulnerability to inject malicious scripts, potentially leading to unauthorized data access, data corruption, or even server takeover.",
		Remediation: "To mitigate this vulnerability, avoid including files from remote servers whenever possible. When it is necessary to do so, ensure that the remote file's location is hard-coded or otherwise not influenced by user input. Also, implement proper input validation and sanitization procedures. Regular code reviews and penetration testing can help to identify and mitigate such issues.",
		Cwe:         98,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/v42/4-Web_Application_Security_Testing/07-Input_Validation_Testing/11.2-Testing_for_Remote_File_Inclusion",
		},
	},
	{
		Code:        SecretsInJsCode,
		Title:       "Exposed Secrets in Javascript",
		Description: "The application appears to contain sensitive data, such as API keys, passwords or cryptographic keys, directly within the JavaScript code. This exposure can lead to critical vulnerabilities as it provides potential attackers with sensitive details that can be used to exploit the application or other related systems.",
		Remediation: "To mitigate this issue, never hard-code secrets into your JavaScript or any other client-side code. Instead, store secrets server-side and ensure they are securely transmitted and only to authenticated and authorized entities. Implement strict access controls and consider using secret management solutions. Regular code reviews can help to identify and remove any accidentally committed secrets.",
		Cwe:         615,
		Severity:    "Medium",
		References:  []string{},
	},
	{
		Code:        SensitiveConfigDetectedCode,
		Title:       "Sensitive Configuration File Detected",
		Description: "A potentially sensitive configuration file has been detected. Configuration files often contain sensitive information, including credentials, database configurations, API keys, and environment settings. Exposing these files publicly can lead to unauthorized access and critical vulnerabilities.\n\nCommon risks include:\n- Leakage of sensitive information, such as database credentials, API keys, or secret tokens\n- Exposure of environment-specific configurations that could be exploited\n- Unauthorized access to backend services or databases\n\nManual review is recommended to confirm the content and assess the impact of exposure.\n",
		Remediation: "Secure access to sensitive configuration files:\n- Restrict public access to configuration files using server settings\n- Use environment variables to store sensitive data and avoid exposing them in public files\n- Regularly review server access permissions to ensure only authorized users can access these files\n- Implement logging and monitoring to detect unauthorized access attempts\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
			"https://owasp.org/www-project-cheat-sheets/cheatsheets/Configuration_Guide.html",
			"https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Protection_Cheat_Sheet.html",
		},
	},
	{
		Code:        ServerHeaderCode,
		Title:       "Server Header Disclosure",
		Description: "The application discloses the server it's using through the Server header, potentially aiding attackers in crafting specific exploits.",
		Remediation: "Remove the 'Server' header or configure your server to stop disclosing this information.",
		Cwe:         200,
		Severity:    "Info",
		References:  []string{},
	},
	{
		Code:        ServerInfoDetectedCode,
		Title:       "Server Information Page Detected",
		Description: "A server information or status page was discovered. These pages typically provide details \nabout the server's configuration, performance metrics, and runtime statistics. While \nuseful for monitoring and debugging, they may expose sensitive information about the \nserver's configuration and internal structure.\n",
		Remediation: "Restrict access to server information pages or move them to a separate administrative \ninterface with appropriate access controls.\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://httpd.apache.org/docs/2.4/mod/mod_status.html",
			"https://httpd.apache.org/docs/2.4/mod/mod_info.html",
		},
	},
	{
		Code:        ServerSidePrototypePollutionCode,
		Title:       "Server-Side Prototype Pollution Detected",
		Description: "The application appears to be vulnerable to Server-Side Prototype Pollution (SSPP) attacks. This vulnerability occurs when the application allows modification of a JavaScript object prototype. When a function traverses the entire prototype chain, an attacker can inject properties into this chain, potentially leading to various impacts, such as denial-of-service, property overwrite, or even remote code execution if the polluted properties are used unsafely.",
		Remediation: "To mitigate this vulnerability, avoid using user-supplied input in the object manipulation functions without proper validation. Validate and sanitize the inputs that are used for configuration. Be aware of the libraries or dependencies that your application uses and keep them updated. Regular code reviews and penetration testing can also help to identify and mitigate such issues.",
		Cwe:         400,
		Severity:    "High",
		References: []string{
			"https://portswigger.net/web-security/prototype-pollution/server-side",
			"https://portswigger.net/research/server-side-prototype-pollution",
			"https://arxiv.org/pdf/2207.11171.pdf",
		},
	},
	{
		Code:        SessionTokenInUrlCode,
		Title:       "Session Token In URL",
		Description: "The application includes session tokens in URLs, potentially exposing sensitive data and enabling session hijacking.",
		Remediation: "Do not include session tokens in URLs. Instead, use secure cookies to manage sessions.",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://cheatsheetseries.owasp.org/cheatsheets/Session_Management_Cheat_Sheet.html",
		},
	},
	{
		Code:        SilverlightDetectedCode,
		Title:       "Microsoft Silverlight Usage Detected",
		Description: "The application appears to be using Microsoft Silverlight, which has reached end-of-life status\nas of October 12, 2021. Silverlight is no longer supported by Microsoft or any major web browsers.\nIts continued use poses significant security risks as it can no longer receive security updates.\nAdditionally, most users will be unable to run Silverlight content as modern browsers have\ncompletely removed support for this technology.\n",
		Remediation: "To address this security concern:\n1. Identify all Silverlight content and functionality in your application\n2. Plan a migration strategy to modern web technologies:\n   - Use HTML5 <video> and <audio> elements for media streaming\n   - Replace Silverlight animations with CSS animations or JavaScript\n   - Use HTML5 Canvas or WebGL for interactive graphics\n   - Consider frameworks like Three.js for 3D content\n   - Use modern JavaScript frameworks for rich internet applications\n3. Remove all Silverlight-related code and content\n4. Update any documentation or user guides that reference Silverlight functionality\n5. Implement user notifications about the technology change if necessary\n",
		Cwe:         477,
		Severity:    "High",
		References: []string{
			"https://learn.microsoft.com/en-us/lifecycle/products/silverlight-5",
			"https://learn.microsoft.com/en-us/lifecycle/announcements/silverlight-end-of-support",
			"https://blogs.windows.com/msedgedev/2015/07/02/moving-to-html5-premium-media/",
		},
	},
	{
		Code:        SniInjectionCode,
		Title:       "Server Name Indication (SNI) Injection",
		Description: "The application is vulnerable to Server Name Indication (SNI) Injection. This vulnerability occurs when the application does not validate or incorrectly processes the SNI during the TLS handshake process. An attacker can exploit this to inject arbitrary data, induce abnormal behavior in applications, or conduct Server-Side Request Forgery (SSRF) attacks.",
		Remediation: "Properly validate and sanitize the SNI during the TLS handshake process. Consider implementing additional security measures such as input validation, parameterized queries, or appropriate encoding to prevent injection attacks. Be wary of how your application handles SNI, especially if you are using a Web Application Server (WAS) or Ingress.",
		Cwe:         91,
		Severity:    "Medium",
		References: []string{
			"https://www.cloudflare.com/learning/ssl/what-is-sni/",
			"https://www.hahwul.com/cullinan/sni-injection",
		},
	},
	{
		Code:        SocketioDetectedCode,
		Title:       "Socket.IO Endpoint Detected",
		Description: "A Socket.IO endpoint was discovered. Socket.IO is a JavaScript library that enables \nreal-time, bidirectional and event-based communication between web clients and servers. \nThe presence of Socket.IO endpoints should be reviewed to ensure proper security \ncontrols are in place.\n",
		Remediation: "Review the Socket.IO implementation to ensure appropriate security controls are \nimplemented and that access is restricted to authorized users only.\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://socket.io/docs/v4/",
			"https://cheatsheetseries.owasp.org/cheatsheets/HTML5_Security_Cheat_Sheet.html#websockets",
		},
	},
	{
		Code:        SqlInjectionCode,
		Title:       "SQL Injection Detected",
		Description: "The application appears to be vulnerable to SQL injection attacks. This vulnerability occurs when the application uses user-supplied input to construct SQL queries without properly sanitizing or validating the input first. An attacker can exploit this vulnerability to manipulate queries, potentially leading to unauthorized data access, data loss, or data corruption.",
		Remediation: "To mitigate this vulnerability, avoid constructing SQL queries with user-supplied input whenever possible. Instead, use parameterized queries or prepared statements, which can help ensure that user input is not interpreted as part of the SQL command. Implement proper input validation and sanitization procedures. Also, ensure that the least privilege principle is followed, and each function of the application has only the necessary access rights it needs to perform its tasks.",
		Cwe:         89,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/SQL_Injection",
			"https://book.hacktricks.xyz/pentesting-web/sql-injection",
			"https://sqlmap.org/",
		},
	},
	{
		Code:        SsiDetectedCode,
		Title:       "Server Side Includes (SSI) Detection",
		Description: "The application appears to support Server Side Includes (SSI), although this does not necessarily indicate a vulnerability. Improper implementation or usage of SSI can lead to vulnerabilities if not properly secured.",
		Remediation: "Monitor and review the usage of SSI within the application. Ensure that its implementation does not expose sensitive data or functionalities.",
		Cwe:         96,
		Severity:    "Info",
		References: []string{
			"https://en.wikipedia.org/wiki/Server_Side_Includes",
		},
	},
	{
		Code:        SsiInjectionCode,
		Title:       "Server Side Includes (SSI) Injection",
		Description: "The application does not properly sanitize user input, potentially allowing for Server Side Includes (SSI) injection attacks. This can be exploited to execute server-side commands or disclose sensitive information.",
		Remediation: "Ensure all user-supplied input is properly sanitized before being processed by the application. Avoid dynamically constructing SSI directives based on user input.",
		Cwe:         96,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/Server-Side_Includes_(SSI)_Injection",
		},
	},
	{
		Code:        SsoMetadataDetectedCode,
		Title:       "SSO/SAML Metadata Endpoint Detected",
		Description: "A Single Sign-On (SSO) metadata endpoint was discovered. These endpoints typically \ncontain SAML configuration details used for establishing federation between service \nproviders and identity providers. While this information is often necessary for SSO \noperation, the exposed metadata should be reviewed to ensure it doesn't disclose \nunnecessary internal details.\n",
		Remediation: "Review the exposed SSO metadata to verify it only contains the minimum information \nrequired for federation. Consider implementing access controls if the metadata \ncontains sensitive internal endpoints or certificates that aren't required by \nidentity providers.\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://www.owasp.org/index.php/SAML_Security_Cheat_Sheet",
			"https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html",
			"https://datatracker.ietf.org/doc/html/rfc7522",
		},
	},
	{
		Code:        SsrfCode,
		Title:       "Server Side Request Forgery",
		Description: "The application can be tricked into making arbitrary HTTP requests to internal services.",
		Remediation: "Ensure the application does not make requests based on user-supplied data. If necessary, use a whitelist of approved domains.",
		Cwe:         918,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/Server_Side_Request_Forgery",
			"https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery",
		},
	},
	{
		Code:        SstiCode,
		Title:       "Server-Side Template Injection (SSTI) Detected",
		Description: "The application appears to be vulnerable to Server-Side Template Injection (SSTI). This vulnerability occurs when an attacker can inject arbitrary template code into a template engine, resulting in unintended code execution on the server. Exploiting this vulnerability could allow attackers to execute arbitrary commands, read sensitive server-side files, or perform other malicious actions.",
		Remediation: "To mitigate this vulnerability, ensure that user inputs are strictly sanitized before being passed to a template engine. Avoid using raw user input within templates without validation or sanitization. Implement strict input validation mechanisms and consider using safer template systems or configurations that restrict the capabilities of templates.",
		Cwe:         94,
		Severity:    "High",
		References: []string{
			"https://portswigger.net/research/server-side-template-injection",
			"https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/18-Testing_for_Server_Side_Template_Injection",
			"https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection",
		},
	},
	{
		Code:        StorageBucketDetectedCode,
		Title:       "Storage Bucket Detected",
		Description: "The application exposes storage bucket URLs or errors in the response. This can provide sensitive information about the storage setup.",
		Remediation: "Avoid exposing storage bucket URLs or error messages publicly to mitigate potential information leakage. Make sure to handle errors gracefully and avoid revealing any sensitive information in error messages. It's recommended to manually review any detected storage buckets to verify if they are exposing sensitive information.",
		Cwe:         200,
		Severity:    "Info",
		References:  []string{},
	},
	{
		Code:        StrictTransportSecurityHeaderCode,
		Title:       "Strict-Transport-Security Header Misconfiguration",
		Description: "The application's HTTP Strict Transport Security (HSTS) policy is misconfigured, potentially leading to man-in-the-middle attacks.",
		Remediation: "Configure your application's headers to properly set the HSTS policy, including 'max-age' and optionally 'includeSubDomains' and 'preload'.",
		Cwe:         523,
		Severity:    "Low",
		References:  []string{},
	},
	{
		Code:        TechStackFingerprintCode,
		Title:       "Technology Stack Fingerprint Report",
		Description: "This report provides a detailed fingerprint of the technology stack used by the target application. It identifies various technologies such as CMS platforms, JavaScript libraries, server software, and more. Knowing the technologies in use can offer insights into potential vulnerabilities and areas for further investigation.",
		Remediation: "No remediation steps are required, as this report is intended for informational purposes. However, understanding the technologies in use can be valuable for identifying potential vulnerabilities specific to those technologies.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/01-Information_Gathering/02-Fingerprint_Web_Server",
			"https://www.wappalyzer.com/",
		},
	},
	{
		Code:        Text4shellCode,
		Title:       "Text4Shell Vulnerability Detected",
		Description: "The application appears to be vulnerable to Text4Shell, a remote code execution vulnerability identified as CVE-2022-42889. This vulnerability affects Apache Commons Text versions 1.5 through 1.9 and occurs due to unsafe string interpolation methods that can execute arbitrary code if manipulated. Key interpolators involved are 'script', 'dns', and 'url' which, if exploited, could allow attackers to execute commands or access data remotely.",
		Remediation: "Immediately update to Apache Commons Text version 1.10 or newer, which removes dangerous default interpolators. Ensure that all data entering string interpolation functions is sanitized and validate inputs to mitigate any potential exploitation. Review and restrict the use of interpolators in your environment to trusted functionality only.",
		Cwe:         502,
		Severity:    "High",
		References: []string{
			"https://security.apache.org/blog/cve-2022-42889/",
			"https://nvd.nist.gov/vuln/detail/cve-2022-42889",
		},
	},
	{
		Code:        UnencryptedPasswordSubmissionCode,
		Title:       "Unencrypted Password Submission Detected",
		Description: "The application allows users to submit passwords over an unencrypted connection (HTTP), which poses a significant security risk. Passwords transmitted over HTTP are sent in plain text and can be intercepted by attackers monitoring network traffic. This vulnerability could lead to unauthorized access to user accounts and compromise sensitive information.",
		Remediation: "To mitigate this vulnerability, ensure that all sensitive data, including passwords, is transmitted over a secure connection (HTTPS). Implement SSL/TLS encryption to protect data in transit and prevent eavesdropping. Additionally, enforce HTTPS redirection to automatically redirect users from HTTP to HTTPS to ensure secure communication. Regularly audit network configurations and monitor for any insecure communication channels.",
		Cwe:         319,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/Insecure_Transport",
			"https://letsencrypt.org/",
			"https://www.cloudflare.com/learning/ssl/why-is-http-not-secure/",
		},
	},
	{
		Code:        UnencryptedWebsocketConnectionCode,
		Title:       "Unencrypted WebSocket Connection Detected",
		Description: "The application establishes a WebSocket connection over an unencrypted connection (ws://), which poses a significant security risk. Data transmitted over unencrypted WebSocket connections can be intercepted by attackers monitoring network traffic, potentially leading to unauthorized access to sensitive information. This vulnerability could compromise the confidentiality and integrity of the data exchanged between the client and server.",
		Remediation: "To mitigate this vulnerability, ensure that all WebSocket connections are established over a secure connection (wss://). Implement SSL/TLS encryption to protect data in transit and prevent eavesdropping. Additionally, review and update WebSocket connection configurations to enforce secure communication and regularly audit the network for any insecure WebSocket endpoints.",
		Cwe:         319,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/WebSocket_Security",
			"https://tools.ietf.org/html/rfc6455",
			"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/WSS",
		},
	},
	{
		Code:        VersionControlFileDetectedCode,
		Title:       "Exposed Version Control File Detected",
		Description: "A version control file has been detected that is publicly accessible. Version control files and directories often contain sensitive information about the repository's structure, configurations, and sometimes access credentials. Exposing these files can lead to unauthorized access or disclose valuable information about the system.\n\nCommon risks include:\n- Leakage of repository configurations or credentials\n- Exposure of source code or private repository data\n- Disclosure of development artifacts or environment settings\n\nManual review is recommended to confirm the sensitivity and impact of the file.\n",
		Remediation: "Secure access to version control files by:\n- Restricting public access to version control files using server configurations\n- Removing any unnecessary version control files from publicly accessible directories\n- Implementing access controls to limit exposure only to authorized users\n- Regularly monitoring for unintended exposure of repository files\n",
		Cwe:         200,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure",
			"https://cheatsheetseries.owasp.org/cheatsheets/Source_Code_Protection_Cheat_Sheet.html",
			"https://owasp.org/www-community/attacks/Source_Code_Disclosure",
		},
	},
	{
		Code:        VulnerableJavascriptDependencyCode,
		Title:       "Vulnerable JavaScript Dependency",
		Description: "The application appears to be using a version of a JavaScript library which is known to be vulnerable. Using out-of-date libraries can expose the application to security risks, as vulnerabilities in the code may be exploited by an attacker.",
		Remediation: "Upgrade the vulnerable library to the latest version or to the minimum secure version. Ensure all other libraries and dependencies are also up-to-date to prevent similar issues. Regular dependency checks and vulnerability scanning can help keep your application secure.",
		Cwe:         937,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities",
		},
	},
	{
		Code:        WafDetectedCode,
		Title:       "Web Application Firewall (WAF) Detection Report",
		Description: "A Web Application Firewall (WAF) has been detected for the target application, suggesting an additional layer of security.",
		Remediation: "No remediation steps are required, as this report is intended for informational purposes only.",
		Cwe:         0,
		Severity:    "Info",
		References: []string{
			"https://www.cloudflare.com/learning/ddos/glossary/web-application-firewall-waf/",
			"https://owasp.org/www-community/Web_Application_Firewall",
		},
	},
	{
		Code:        WebassemblyDetectedCode,
		Title:       "WebAssembly (Wasm) Detection",
		Description: "The application appears to use WebAssembly (Wasm), a binary instruction format for a stack-based virtual machine. WebAssembly is designed for efficient and secure execution of code on the web, enabling high-performance applications. However, improper management of WebAssembly can introduce security risks.",
		Remediation: "Ensure that the WebAssembly modules are sourced from trusted origins. Regularly audit and update WebAssembly modules to patch any vulnerabilities. Implement appropriate Content Security Policies (CSP) to restrict WebAssembly execution. Monitor and log WebAssembly usage to detect any anomalous activities.",
		Cwe:         915,
		Severity:    "Medium",
		References: []string{
			"https://webassembly.org/",
			"https://webassembly.org/docs/security/",
			"https://developer.mozilla.org/en-US/docs/WebAssembly",
		},
	},
	{
		Code:        WebserverControlFileExposedCode,
		Title:       "Web Server Access Control File Exposed",
		Description: "A web server access control file (.htaccess, .htpasswd, or similar) has been found exposed.\nThese files contain sensitive server configuration details that may include URL rewriting rules,\nauthentication settings, directory restrictions, and custom handlers. Access to these files can\nreveal implementation details and security mechanisms that could aid an attacker in\ncompromising the system.\n",
		Remediation: "1. Configure your web server to deny access to control files\n2. Use appropriate filesystem permissions on configuration files\n3. Move sensitive configurations to the main server configuration where possible\n4. Remove any unnecessary backup copies of configuration files\n5. Implement monitoring for unauthorized access attempts\n",
		Cwe:         538,
		Severity:    "Medium",
		References: []string{
			"https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/02-Configuration_and_Deployment_Management_Testing/04-Review_Old_Backup_and_Unreferenced_Files_for_Sensitive_Information",
			"https://httpd.apache.org/docs/2.4/howto/htaccess.html",
		},
	},
	{
		Code:        WebsocketDetectedCode,
		Title:       "WebSockets in Use",
		Description: "The application appears to be using WebSockets. This could potentially lead to real-time interaction, data streaming, or possibly real-time vulnerability exploitation if not properly secured.",
		Remediation: "Ensure that the WebSocket connection is secure (wss://) and that appropriate authentication, authorization, and validation measures are in place for any data transmitted over the WebSocket.",
		Cwe:         749,
		Severity:    "Info",
		References:  []string{},
	},
	{
		Code:        WordpressDetectedCode,
		Title:       "WordPress Detected",
		Description: "A WordPress installation has been detected on the target system. While WordPress is a widely used and trusted content management system, it is essential to ensure that it is properly secured and maintained. Outdated installations, vulnerable plugins or themes, and misconfigurations can expose the application to various security risks.\n\nPotential risks include:\n- Exposure to known vulnerabilities due to outdated core, plugins, or themes\n- Brute-force attacks on login pages\n- Unauthorized access to sensitive files or administrative functionalities\n- Common web vulnerabilities like XSS, SQL Injection, and CSRF\n\nManual review is recommended to determine the exact security posture and any potential vulnerabilities.\n",
		Remediation: "Review the WordPress installation:\n- Update WordPress core, themes, and plugins to their latest versions.\n- Remove any unused or deprecated plugins and themes.\n- Implement security best practices, such as:\n  - Using strong, unique passwords for all user accounts\n  - Limiting login attempts and implementing CAPTCHA\n  - Enabling two-factor authentication (2FA)\n  - Installing reputable security plugins (e.g., Wordfence, Sucuri)\n- Restrict access to sensitive files and directories (e.g., `wp-config.php`, `.htaccess`).\n- Disable directory listing on the web server.\n- Regularly monitor and audit for suspicious activities or changes.\n",
		Cwe:         200,
		Severity:    "Info",
		References: []string{
			"https://wordpress.org/support/article/hardening-wordpress/",
			"https://wordpress.org/support/security/",
			"https://owasp.org/www-project-wordpress-security/",
		},
	},
	{
		Code:        WsdlDefinitionDetectedCode,
		Title:       "WSDL Definition Detected",
		Description: "A WSDL (Web Services Description Language) endpoint has been identified in the application. While WSDL itself is not \ninherently a security vulnerability, its presence warrants attention as WSDL files often contain detailed information \nabout web service operations, data structures, and endpoints. This information could potentially be leveraged by \nattackers to understand the API surface and identify potential attack vectors.\n",
		Remediation: "To secure the WSDL endpoint:\n1. Consider whether public WSDL exposure is necessary\n2. Implement authentication for WSDL access if possible\n3. Remove any sensitive information from service descriptions\n4. Use WSDL hiding techniques in production environments\n5. Implement proper access controls on the actual service endpoints\n6. Consider using WS-Security for sensitive operations\n7. Monitor and log access to WSDL endpoints\n8. Ensure error messages don't reveal internal details\n9. Consider using a service gateway to control WSDL access\n",
		Cwe:         651,
		Severity:    "Info",
		References: []string{
			"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html",
			"https://www.soapui.org/docs/soap-and-wsdl/tips-tricks/web-service-hacking/",
			"https://www.w3.org/TR/ws-arch/#security",
		},
	},
	{
		Code:        XAspVersionHeaderCode,
		Title:       "X-AspNet-Version Header Disclosure",
		Description: "The application discloses the ASP.NET version it's using through the X-AspNet-Version header, potentially aiding attackers in crafting specific exploits.",
		Remediation: "Remove the 'X-AspNet-Version' header or configure your ASP.NET application to stop disclosing this information.",
		Cwe:         200,
		Severity:    "Info",
		References:  []string{},
	},
	{
		Code:        XFrameOptionsHeaderCode,
		Title:       "X-Frame-Options Header Missing or Incorrect",
		Description: "The application does not correctly specify the X-Frame-Options header, potentially leading to clickjacking attacks.",
		Remediation: "Always specify a correct 'X-Frame-Options' header in the response. Recommended values are 'DENY' or 'SAMEORIGIN'.",
		Cwe:         346,
		Severity:    "Low",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
		},
	},
	{
		Code:        XPoweredByHeaderCode,
		Title:       "X-Powered-By Header Disclosure",
		Description: "The application discloses the technology it's using through the X-Powered-By header, potentially aiding attackers in crafting specific exploits.",
		Remediation: "Remove the 'X-Powered-By' header or configure your technology to stop disclosing this information.",
		Cwe:         200,
		Severity:    "Info",
		References:  []string{},
	},
	{
		Code:        XXssProtectionHeaderCode,
		Title:       "X-XSS-Protection Header Missing or Incorrect",
		Description: "The application does not correctly specify the X-XSS-Protection header, potentially leading to cross-site scripting attacks.",
		Remediation: "Always specify 'X-XSS-Protection: 1; mode=block' in the response header to enable XSS filtering on the client side.",
		Cwe:         79,
		Severity:    "Info",
		References: []string{
			"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection",
		},
	},
	{
		Code:        XpathInjectionCode,
		Title:       "XPath Injection Detected",
		Description: "The application appears to be vulnerable to XPath injection attacks. This vulnerability occurs when the application uses user-supplied input to construct XPath queries without properly sanitizing or validating the input first. An attacker can exploit this vulnerability to manipulate queries, potentially leading to unauthorized data access, data loss, or data corruption.",
		Remediation: "To mitigate this vulnerability, avoid constructing XPath queries with user-supplied input whenever possible. Instead, use parameterized queries or prepared statements, which can help ensure that user input is not interpreted as part of the XPath command. Implement proper input validation and sanitization procedures. Also, ensure that the least privilege principle is followed, and each function of the application has only the necessary access rights it needs to perform its tasks.",
		Cwe:         643,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/XPATH_Injection",
			"https://book.hacktricks.xyz/pentesting-web/xpath-injection",
		},
	},
	{
		Code:        XsltInjectionCode,
		Title:       "XSLT Injection",
		Description: "The application does not properly sanitize user input before processing it with XSLT. This can lead to arbitrary code execution, data extraction, or other unintended behaviors when malicious XSLT content is processed.",
		Remediation: "Ensure all user-supplied input is thoroughly sanitized and validated before being used in XSLT processing. Avoid dynamically constructing XSLT based on user input. If dynamic construction is required, use a safe method for combining XSLT, such as parameterized templates.",
		Cwe:         91,
		Severity:    "High",
		References: []string{
			"https://en.wikipedia.org/wiki/XSLT",
			"https://owasp.org/www-pdf-archive/OWASP_Switzerland_Meeting_2015-06-17_XSLT_SSRF_ENG.pdf",
			"https://www.youtube.com/watch?v=j4vCGtF3a64",
			"https://book.hacktricks.xyz/pentesting-web/xslt-server-side-injection-extensible-stylesheet-languaje-transformations",
		},
	},
	{
		Code:        XssReflectedCode,
		Title:       "Reflected XSS",
		Description: "The application appears to be vulnerable to Reflected Cross-Site Scripting (XSS) attacks. This vulnerability occurs when user-supplied input is incorporated into web pages without proper sanitization and is then returned to the user in the web page. An attacker can exploit this by crafting malicious links containing script code which executes in the victim's browser when clicked, potentially leading to unauthorized access, data theft, or malicious actions on behalf of the user.",
		Remediation: "To mitigate this vulnerability, ensure all user-supplied input is encoded or escaped before being included in output. Implement content security policies that restrict the sources of executable scripts. Use frameworks that automatically handle these encodings. Validate and sanitize all user input to remove or encode potentially dangerous characters. Regularly update and review web applications for XSS vulnerabilities.",
		Cwe:         79,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/attacks/xss/",
			"https://en.wikipedia.org/wiki/Cross-site_scripting",
			"https://portswigger.net/web-security/cross-site-scripting/reflected",
		},
	},
	{
		Code:        XxeCode,
		Title:       "XML External Entity (XXE) Detected",
		Description: "The application appears to be vulnerable to XML External Entity (XXE) attacks. This vulnerability occurs when an application processes XML input containing a reference to an external entity. It can lead to disclosure of internal files, internal port scanning, remote code execution, and denial of service attacks.",
		Remediation: "Disable the processing of external entities in your XML parser. Ensure that any XML parsing libraries or frameworks used by the application are configured securely. Regularly update and patch XML libraries to protect against known XXE exploits. If possible, use JSON or other data formats instead of XML.",
		Cwe:         611,
		Severity:    "High",
		References: []string{
			"https://owasp.org/www-community/vulnerabilities/XML_External_Entity_(XXE)_Processing",
			"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html",
			"https://owasp.org/www-project-top-ten/2017/A4_2017-XML_External_Entities_(XXE)",
		},
	},
}
