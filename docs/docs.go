// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/auth/token/renew": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Renew access and refresh tokens.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "renew access and refresh tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.Renew"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.RenewTokensResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/sign/in": {
            "post": {
                "description": "Auth user and return access and refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "auth user and return access and refresh token",
                "parameters": [
                    {
                        "description": "SignIn payload",
                        "name": "signIn",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.SignIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.SignInResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/auth/user/sign/out": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "De-authorize user and delete refresh token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "de-authorize user and delete refresh token",
                "responses": {
                    "204": {
                        "description": "ok",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/browser-actions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of StoredBrowserActions with optional filtering and sorting options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Browser Actions"
                ],
                "summary": "List StoredBrowserActions with filtering and sorting",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Page size",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search query for title",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Scope filter (global or workspace)",
                        "name": "scope",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Workspace ID filter",
                        "name": "workspace_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns 'data' (array of StoredBrowserActions) and 'count' (total number of records)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Creates a new StoredBrowserActions record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Browser Actions"
                ],
                "summary": "Create a new StoredBrowserActions",
                "parameters": [
                    {
                        "description": "Browser actions input object to create",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BrowserActionsInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.StoredBrowserActions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/browser-actions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a StoredBrowserActions record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Browser Actions"
                ],
                "summary": "Get a StoredBrowserActions by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "StoredBrowserActions ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.StoredBrowserActions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates an existing StoredBrowserActions record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Browser Actions"
                ],
                "summary": "Update a StoredBrowserActions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "StoredBrowserActions ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "BrowserActionsInput object to update",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.BrowserActionsInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.StoredBrowserActions"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes an existing StoredBrowserActions record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Browser Actions"
                ],
                "summary": "Delete a StoredBrowserActions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "StoredBrowserActions ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get history with optional pagination and filtering by status codes, HTTP methods, and sources",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history",
                "deprecated": true,
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Size of each page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of status codes to filter by",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of HTTP methods to filter by",
                        "name": "methods",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sources to filter by",
                        "name": "sources",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of history IDs to filter by",
                        "name": "ids",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Workspace ID to filter by",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Playground session ID to filter by",
                        "name": "playground_session",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "task",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "created_at",
                            "updated_at",
                            "status_code",
                            "request_body_size",
                            "url",
                            "response_body_size",
                            "parameters_count",
                            "method"
                        ],
                        "type": "string",
                        "default": "\"id\"",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "default": "\"desc\"",
                        "description": "Sort order",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get history with optional pagination and filtering using POST request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get history (POST)",
                "parameters": [
                    {
                        "description": "History filter options",
                        "name": "filters",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.HistoryFilter"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/root-nodes": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all the root history items",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Gets all root history nodes",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID to filter by",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.RootNode"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/websocket/connections": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get WebSocket connections with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get WebSocket connections",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Size of each page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "task",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of sources to filter by",
                        "name": "sources",
                        "in": "query"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/websocket/connections/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get details of a specific WebSocket connection by its ID, including its associated messages",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get WebSocket connection details",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "WebSocket connection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.WebSocketConnection"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/websocket/messages": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get WebSocket messages with optional pagination and filtering by connection id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get WebSocket messages",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Size of each page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter messages by WebSocket connection ID",
                        "name": "connection_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.WebSocketMessage"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/history/{id}/children": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all the other history items that have the same depth or more than the provided history ID and that start with the same URL",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "History"
                ],
                "summary": "Get children history",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "History ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.HistorySummary"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/interactions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get interactions with optional pagination and protocols filter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interactions"
                ],
                "summary": "Get interactions",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Size of each page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of protocols to filter by",
                        "name": "protocols",
                        "in": "query"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/interactions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Fetch the detail of an OOB Interaction by its ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Interactions"
                ],
                "summary": "Get interaction detail",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Interaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.OOBInteraction"
                        }
                    },
                    "404": {
                        "description": "Interaction not found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/issues": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all issues with a count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issues"
                ],
                "summary": "List all issues",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "task",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Task Job ID",
                        "name": "taskjob",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of issue codes to filter by",
                        "name": "codes",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Issue"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/issues/grouped": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all issues grouped",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issues"
                ],
                "summary": "List all issues grouped",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "task",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Task Job ID",
                        "name": "taskjob",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.GroupedIssue"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/issues/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves details of a specific issue by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issues"
                ],
                "summary": "Get details of an issue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Issue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/issues/{id}/set-false-positive": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates the FalsePositive attribute of a specific issue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issues"
                ],
                "summary": "Set an issue as a false positive",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Boolean value for FalsePositive",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.IssueUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/collections": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List playground collections",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "List playground collections",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search by name or description",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by workspace id",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (id, name, description, workspace_id)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size for pagination",
                        "name": "page_size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.PlaygroundCollection"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new playground collection",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Create a new playground collection",
                "parameters": [
                    {
                        "description": "Create Playground Collection Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreatePlaygroundCollectionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.PlaygroundCollection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/collections/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a playground collection by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Get Playground Collection by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Playground Collection ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PlaygroundCollection"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/fuzz": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Schedules a new task to fuzz the provided request with the provided insertion points, payloads, etc and returns the task ID to filter the results",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Schedules a new task to fuzz the provided request",
                "parameters": [
                    {
                        "description": "Set the fuzzing request configuration",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PlaygroundFuzzInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/replay": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Sends a request to a target and returns the response",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Sends a request to a target",
                "parameters": [
                    {
                        "description": "Set the request configuration",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PlaygroundReplayInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/manual.ReplayResult"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/sessions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List Playground Sessions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "List Playground Sessions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by session type (manual, fuzz)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by original request ID",
                        "name": "original_request_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by collection ID",
                        "name": "collection",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search by name",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size for pagination",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by field (id, name, type, original_request_id, collection, workspace)",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order (asc, desc)",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.PlaygroundSession"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Create a new playground session",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Create a new playground session",
                "parameters": [
                    {
                        "description": "Create Playground Session Input",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.CreatePlaygroundSessionInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.PlaygroundSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/sessions/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a playground session by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "Get Playground Session by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Playground Session ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.PlaygroundSession"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/playground/wordlists": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "List all wordlists available for use in the playground",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Playground"
                ],
                "summary": "List available wordlists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/manual.Wordlist"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/report": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Generates a report for a given workspace",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reports"
                ],
                "summary": "Generate a report",
                "parameters": [
                    {
                        "description": "Report request",
                        "name": "report",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ReportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scan/active": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives a list of items and schedules them for active scanning. Either the workspace ID or task ID must be provided.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scan"
                ],
                "summary": "Submit items for active scanning",
                "parameters": [
                    {
                        "description": "Active scan items and configuration",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.ActiveScanInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scan/full": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives a list of URLs and other parameters and schedules them for a full scan",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scan"
                ],
                "summary": "Submit URLs for full scanning",
                "parameters": [
                    {
                        "description": "Configuration for full scan",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/options.FullScanOptions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/scan/passive": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Receives a list of items and schedules them for passive scanning",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Scan"
                ],
                "summary": "Submit items for passive scanning",
                "parameters": [
                    {
                        "description": "List of items",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.PassiveScanInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/api.ActionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/sitemap": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves sitemap based on workspace and task ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Sitemap"
                ],
                "summary": "Retrieve sitemap based on filters",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID filter",
                        "name": "workspace",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Task ID filter",
                        "name": "task",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.SitemapNode"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stats/system": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieves system statistics such as the current database size.",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved system stats",
                        "schema": {
                            "$ref": "#/definitions/db.SystemStats"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/stats/workspace": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stats"
                ],
                "summary": "Retrieves workspace statistics including counts of issues, history entries, JWTs,",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved stats",
                        "schema": {
                            "$ref": "#/definitions/db.WorkspaceStats"
                        }
                    },
                    "400": {
                        "description": "Invalid workspace ID",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves tasks based on pagination and status filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "List tasks with pagination and filtering",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Query string to search for",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Workspace ID",
                        "name": "workspace",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of statuses to filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Playground session ID to filter by",
                        "name": "playground_session",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Task"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tasks/jobs": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Allows to filter and search task jobs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Search Task Jobs",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Task ID",
                        "name": "task",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Number of items per page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of statuses to filter",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of titles to filter",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of status codes to filter",
                        "name": "status_codes",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Comma-separated list of methods to filter",
                        "name": "methods",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "id",
                            "history_method",
                            "history_url",
                            "history_status",
                            "history_parameters_count",
                            "title",
                            "status",
                            "started_at",
                            "completed_at",
                            "created_at",
                            "updated_at"
                        ],
                        "type": "string",
                        "description": "Field to sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort_order",
                        "in": "query"
                    }
                ],
                "responses": {
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/tokens/jwts": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a list of JWTs with optional filtering and sorting options",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "JWT"
                ],
                "summary": "List JWTs with filtering and sorting",
                "parameters": [
                    {
                        "description": "Filtering and sorting options",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/db.JwtFilters"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workspaces": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves all workspaces with a count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspaces"
                ],
                "summary": "List all workspaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Search query",
                        "name": "query",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 20,
                        "description": "Size of each page",
                        "name": "page_size",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/db.Workspace"
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Saves a new workspace to the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspaces"
                ],
                "summary": "Create a new workspace",
                "parameters": [
                    {
                        "description": "Workspace to create",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.WorkspaceCreateInput"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/db.Workspace"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/workspaces/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Retrieves a workspace by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspaces"
                ],
                "summary": "Get a single workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Workspace"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Updates a workspace by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspaces"
                ],
                "summary": "Update a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Workspace object",
                        "name": "workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/api.WorkspaceUpdateInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/db.Workspace"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Deletes a workspace and all associated data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspaces"
                ],
                "summary": "Delete a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Workspace ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message\": \"Workspace successfully deleted",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/api.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "actions.Action": {
            "type": "object",
            "required": [
                "type"
            ],
            "properties": {
                "condition": {
                    "enum": [
                        "contains",
                        "equals",
                        "visible",
                        "hidden"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/actions.AssertCondition"
                        }
                    ]
                },
                "duration": {
                    "type": "integer"
                },
                "expression": {
                    "type": "string"
                },
                "file": {
                    "type": "string"
                },
                "for": {
                    "enum": [
                        "visible",
                        "hidden",
                        "enabled",
                        "load"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/actions.WaitCondition"
                        }
                    ]
                },
                "position": {
                    "enum": [
                        "top",
                        "bottom"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/actions.ScrollPosition"
                        }
                    ]
                },
                "selector": {
                    "type": "string"
                },
                "type": {
                    "enum": [
                        "navigate",
                        "click",
                        "fill",
                        "wait",
                        "assert",
                        "scroll",
                        "screenshot",
                        "sleep",
                        "evaluate"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/actions.ActionType"
                        }
                    ]
                },
                "url": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "actions.ActionType": {
            "type": "string",
            "enum": [
                "navigate",
                "click",
                "fill",
                "wait",
                "assert",
                "scroll",
                "screenshot",
                "sleep",
                "evaluate"
            ],
            "x-enum-varnames": [
                "ActionNavigate",
                "ActionClick",
                "ActionFill",
                "ActionWait",
                "ActionAssert",
                "ActionScroll",
                "ActionScreenshot",
                "ActionSleep",
                "ActionEvaluate"
            ]
        },
        "actions.ActionsExecutionResults": {
            "type": "object",
            "properties": {
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/lib.LogEntry"
                    }
                },
                "screenshots": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/actions.ScreenshotResult"
                    }
                },
                "succeded": {
                    "type": "boolean"
                }
            }
        },
        "actions.AssertCondition": {
            "type": "string",
            "enum": [
                "contains",
                "equals",
                "visible",
                "hidden"
            ],
            "x-enum-varnames": [
                "AssertContains",
                "AssertEquals",
                "AssertVisible",
                "AssertHidden"
            ]
        },
        "actions.ScreenshotResult": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "string"
                },
                "output_file": {
                    "type": "string"
                },
                "selector": {
                    "type": "string"
                }
            }
        },
        "actions.ScrollPosition": {
            "type": "string",
            "enum": [
                "top",
                "bottom"
            ],
            "x-enum-varnames": [
                "ScrollTop",
                "ScrollBottom"
            ]
        },
        "actions.WaitCondition": {
            "type": "string",
            "enum": [
                "visible",
                "hidden",
                "enabled",
                "load"
            ],
            "x-enum-varnames": [
                "WaitVisible",
                "WaitHidden",
                "WaitEnabled",
                "WaitLoad"
            ]
        },
        "api.ActionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "api.ActiveScanInput": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "task": {
                    "type": "integer",
                    "minimum": 0
                },
                "workspace": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "api.BrowserActionsInput": {
            "type": "object",
            "required": [
                "actions",
                "scope",
                "title"
            ],
            "properties": {
                "actions": {
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/actions.Action"
                    }
                },
                "scope": {
                    "enum": [
                        "global",
                        "workspace"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.BrowserActionScope"
                        }
                    ]
                },
                "title": {
                    "type": "string",
                    "minLength": 1
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "api.BrowserReplayActionsInput": {
            "type": "object",
            "properties": {
                "post_request_action_id": {
                    "type": "integer"
                },
                "pre_request_action_id": {
                    "type": "integer"
                }
            }
        },
        "api.CreatePlaygroundCollectionInput": {
            "type": "object",
            "required": [
                "name",
                "workspace_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "api.CreatePlaygroundSessionInput": {
            "type": "object",
            "required": [
                "collection_id",
                "name"
            ],
            "properties": {
                "collection_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "name": {
                    "type": "string"
                },
                "original_request_id": {
                    "type": "integer",
                    "minimum": 0
                },
                "type": {
                    "$ref": "#/definitions/db.PlaygroundSessionType"
                }
            }
        },
        "api.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.HistorySummary": {
            "type": "object",
            "properties": {
                "depth": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "method": {
                    "type": "string"
                },
                "parameters_count": {
                    "type": "integer"
                },
                "status_code": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.IssueUpdateResponse": {
            "type": "object",
            "properties": {
                "issue": {
                    "$ref": "#/definitions/db.Issue"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "api.PassiveScanInput": {
            "type": "object",
            "required": [
                "items"
            ],
            "properties": {
                "items": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "api.PlaygroundFuzzInput": {
            "type": "object",
            "required": [
                "insertion_points",
                "raw_request",
                "session_id",
                "url"
            ],
            "properties": {
                "insertion_points": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/manual.FuzzerInsertionPoint"
                    }
                },
                "options": {
                    "$ref": "#/definitions/manual.RequestOptions"
                },
                "raw_request": {
                    "type": "string",
                    "example": "GET / HTTP/1.1\r\nHost: example.com\r\n\r\n"
                },
                "session_id": {
                    "type": "integer"
                },
                "url": {
                    "type": "string",
                    "example": "https://example.com/"
                }
            }
        },
        "api.PlaygroundReplayInput": {
            "type": "object",
            "required": [
                "mode",
                "request",
                "session_id"
            ],
            "properties": {
                "browser_actions": {
                    "$ref": "#/definitions/api.BrowserReplayActionsInput"
                },
                "mode": {
                    "type": "string",
                    "enum": [
                        "raw",
                        "browser"
                    ]
                },
                "options": {
                    "$ref": "#/definitions/manual.RequestOptions"
                },
                "request": {
                    "$ref": "#/definitions/manual.Request"
                },
                "session_id": {
                    "type": "integer"
                }
            }
        },
        "api.Renew": {
            "type": "object",
            "properties": {
                "refresh_token": {
                    "type": "string"
                }
            }
        },
        "api.RenewTokensResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "msg": {
                    "type": "string"
                },
                "tokens": {
                    "$ref": "#/definitions/auth.Tokens"
                }
            }
        },
        "api.ReportRequest": {
            "type": "object",
            "required": [
                "format",
                "title",
                "workspace_id"
            ],
            "properties": {
                "format": {
                    "enum": [
                        "html",
                        "json"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/report.ReportFormat"
                        }
                    ]
                },
                "min_confidence": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "api.RootNode": {
            "type": "object",
            "properties": {
                "depth": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "api.SignIn": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 255
                },
                "password": {
                    "type": "string",
                    "maxLength": 255
                }
            }
        },
        "api.SignInResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "boolean"
                },
                "msg": {
                    "type": "string"
                },
                "tokens": {
                    "$ref": "#/definitions/api.SignInTokens"
                }
            }
        },
        "api.SignInTokens": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "api.WorkspaceCreateInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "api.WorkspaceUpdateInput": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "auth.Tokens": {
            "type": "object",
            "properties": {
                "access": {
                    "type": "string"
                },
                "refresh": {
                    "type": "string"
                }
            }
        },
        "db.BrowserActionScope": {
            "type": "string",
            "enum": [
                "global",
                "workspace"
            ],
            "x-enum-varnames": [
                "BrowserActionScopeGlobal",
                "BrowserActionScopeWorkspace"
            ]
        },
        "db.GroupedIssue": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.IssueItem"
                    }
                },
                "severity": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "db.History": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "depth": {
                    "type": "integer"
                },
                "evaluated": {
                    "type": "boolean"
                },
                "id": {
                    "type": "integer"
                },
                "json_web_tokens": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.JsonWebToken"
                    }
                },
                "method": {
                    "type": "string"
                },
                "note": {
                    "type": "string"
                },
                "parameters_count": {
                    "type": "integer"
                },
                "playground_session_id": {
                    "type": "integer"
                },
                "proto": {
                    "type": "string"
                },
                "raw_request": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "raw_response": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "request_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "request_body_size": {
                    "type": "integer"
                },
                "request_content_length": {
                    "type": "integer"
                },
                "request_content_type": {
                    "type": "string"
                },
                "response_body": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "response_body_size": {
                    "type": "integer"
                },
                "response_content_type": {
                    "type": "string"
                },
                "source": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.HistoryFilter": {
            "type": "object",
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "methods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pagination": {
                    "$ref": "#/definitions/db.Pagination"
                },
                "playground_session_id": {
                    "type": "integer"
                },
                "query": {
                    "type": "string"
                },
                "request_content_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "response_content_types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "sort_by": {
                    "description": "Validate to be one of the listed fields",
                    "type": "string",
                    "enum": [
                        "id",
                        "created_at",
                        "updated_at",
                        "status_code",
                        "request_body_size",
                        "url",
                        "response_body_size",
                        "parameters_count",
                        "method"
                    ]
                },
                "sort_order": {
                    "description": "Validate to be either \"asc\" or \"desc\"",
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "status_codes": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "task_id": {
                    "type": "integer"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.Issue": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "confidence": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "curl_command": {
                    "type": "string"
                },
                "cwe": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "details": {
                    "type": "string"
                },
                "false_positive": {
                    "type": "boolean"
                },
                "http_method": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "interactions": {
                    "description": "OriginalHistory   History          ` + "`" + `json:\"original_history\" gorm:\"constraint:OnUpdate:CASCADE,OnDelete:SET NULL;\"` + "`" + `\nOriginalHistoryID *uint            ` + "`" + `json:\"original_history_id\" gorm:\"index\"` + "`" + `",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.OOBInteraction"
                    }
                },
                "note": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "references": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "remediation": {
                    "type": "string"
                },
                "request": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.History"
                    }
                },
                "response": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "severity": {
                    "$ref": "#/definitions/db.severity"
                },
                "status_code": {
                    "type": "integer"
                },
                "task_id": {
                    "type": "integer"
                },
                "task_job_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "websocket_connection_id": {
                    "type": "integer"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.IssueItem": {
            "type": "object",
            "properties": {
                "confidence": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "db.IssuesStats": {
            "type": "object",
            "properties": {
                "critical": {
                    "type": "integer"
                },
                "high": {
                    "type": "integer"
                },
                "info": {
                    "type": "integer"
                },
                "low": {
                    "type": "integer"
                },
                "medium": {
                    "type": "integer"
                },
                "unknown": {
                    "type": "integer"
                }
            }
        },
        "db.JsonWebToken": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "audience": {
                    "type": "string"
                },
                "cracked": {
                    "type": "boolean"
                },
                "created_at": {
                    "type": "string"
                },
                "expiration": {
                    "type": "string"
                },
                "histories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.History"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "issued_at": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "secret": {
                    "type": "string"
                },
                "signature": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                },
                "tested_embedded_wordlist": {
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.JwtFilters": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string",
                    "enum": [
                        "HS256",
                        "HS384",
                        "HS512",
                        "RS256",
                        "RS384",
                        "RS512",
                        "ES256",
                        "ES384",
                        "ES512"
                    ]
                },
                "audience": {
                    "type": "string"
                },
                "issuer": {
                    "type": "string"
                },
                "sort_by": {
                    "description": "Example validation rule for sort_by",
                    "type": "string",
                    "enum": [
                        "token",
                        "header",
                        "issuer",
                        "id",
                        "algorithm",
                        "subject",
                        "audience",
                        "expiration",
                        "issued_at"
                    ]
                },
                "sort_order": {
                    "description": "Example validation rule for sort_order",
                    "type": "string",
                    "enum": [
                        "asc",
                        "desc"
                    ]
                },
                "subject": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.MessageDirection": {
            "type": "string",
            "enum": [
                "sent",
                "received"
            ],
            "x-enum-varnames": [
                "MessageSent",
                "MessageReceived"
            ]
        },
        "db.OOBInteraction": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "full_id": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "issue_id": {
                    "type": "integer"
                },
                "oob_test_id": {
                    "type": "integer"
                },
                "oobtest": {
                    "$ref": "#/definitions/db.OOBTest"
                },
                "protocol": {
                    "type": "string"
                },
                "qtype": {
                    "type": "string"
                },
                "raw_request": {
                    "type": "string"
                },
                "raw_response": {
                    "type": "string"
                },
                "remote_address": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "unique_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.OOBTest": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "history_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "insertion_point": {
                    "type": "string"
                },
                "interaction_domain": {
                    "type": "string"
                },
                "interaction_id": {
                    "type": "string"
                },
                "payload": {
                    "type": "string"
                },
                "target": {
                    "type": "string"
                },
                "task_id": {
                    "type": "integer"
                },
                "task_job_id": {
                    "type": "integer"
                },
                "test_name": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.Pagination": {
            "type": "object",
            "properties": {
                "page": {
                    "type": "integer",
                    "minimum": 1
                },
                "page_size": {
                    "type": "integer",
                    "maximum": 100000,
                    "minimum": 1
                }
            }
        },
        "db.PlaygroundCollection": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sessions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.PlaygroundSession"
                    }
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.PlaygroundSession": {
            "type": "object",
            "properties": {
                "collection_id": {
                    "description": "Task              Task                 ` + "`" + `json:\"-\" gorm:\"foreignKey:TaskID\"` + "`" + `\nTaskID            *uint                ` + "`" + `json:\"task_id\"` + "`" + `",
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "original_request_id": {
                    "description": "OriginalRequest   History               ` + "`" + `json:\"-\" gorm:\"foreignKey:OriginalRequestID\"` + "`" + `",
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/db.PlaygroundSessionType"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.PlaygroundSessionType": {
            "type": "string",
            "enum": [
                "manual",
                "fuzz"
            ],
            "x-enum-varnames": [
                "ManualType",
                "FuzzType"
            ]
        },
        "db.RequestsStats": {
            "type": "object",
            "properties": {
                "crawler": {
                    "type": "integer"
                },
                "playground_fuzzer": {
                    "type": "integer"
                },
                "scanner": {
                    "type": "integer"
                }
            }
        },
        "db.SitemapNode": {
            "type": "object",
            "properties": {
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.SitemapNode"
                    }
                },
                "depth": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "other_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "path": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/db.SitemapNodeType"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "db.SitemapNodeType": {
            "type": "string",
            "enum": [
                "root",
                "directory",
                "file",
                "query",
                "php",
                "asp",
                "jsp",
                "js",
                "css",
                "html",
                "xml",
                "json",
                "yaml",
                "sql",
                "image",
                "video",
                "audio",
                "markdown",
                "font",
                "text"
            ],
            "x-enum-varnames": [
                "SitemapNodeTypeRoot",
                "SitemapNodeTypeDirectory",
                "SitemapNodeTypeFile",
                "SitemapNodeTypeQuery",
                "SitemapNodeTypePhp",
                "SitemapNodeTypeAsp",
                "SitemapNodeTypeJsp",
                "SitemapNodeTypeJs",
                "SitemapNodeTypeCss",
                "SitemapNodeTypeHtml",
                "SitemapNodeTypeXml",
                "SitemapNodeTypeJson",
                "SitemapNodeTypeYaml",
                "SitemapNodeTypeSql",
                "SitemapNodeTypeImage",
                "SitemapNodeTypeVideo",
                "SitemapNodeTypeAudio",
                "SitemapNodeTypeMarkdown",
                "SitemapNodeTypeFont",
                "SitemapNodeTypeText"
            ]
        },
        "db.StoredBrowserActions": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/actions.Action"
                    }
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "scope": {
                    "$ref": "#/definitions/db.BrowserActionScope"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.SystemStats": {
            "type": "object",
            "properties": {
                "database_size": {
                    "type": "string"
                }
            }
        },
        "db.Task": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "finished_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "playground_session_id": {
                    "type": "integer"
                },
                "scan_options": {
                    "$ref": "#/definitions/options.FullScanOptions"
                },
                "started_at": {
                    "type": "string"
                },
                "stats": {
                    "$ref": "#/definitions/db.TaskStats"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/db.TaskType"
                },
                "updated_at": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.TaskStats": {
            "type": "object",
            "properties": {
                "issues": {
                    "$ref": "#/definitions/db.IssuesStats"
                },
                "requests": {
                    "$ref": "#/definitions/db.RequestsStats"
                }
            }
        },
        "db.TaskType": {
            "type": "string",
            "enum": [
                "scan",
                "playground-fuzzer",
                "playground-manual",
                "browser",
                "crawl"
            ],
            "x-enum-varnames": [
                "TaskTypeScan",
                "TaskTypePlaygroundFuzzer",
                "TaskTypePlaygroundManual",
                "TaskTypeBrowser",
                "TaskTypeCrawl"
            ]
        },
        "db.WebSocketConnection": {
            "type": "object",
            "properties": {
                "closed_at": {
                    "description": "timestamp for when the connection is closed",
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/db.WebSocketMessage"
                    }
                },
                "source": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                },
                "status_text": {
                    "type": "string"
                },
                "task_id": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                },
                "workspace_id": {
                    "type": "integer"
                }
            }
        },
        "db.WebSocketMessage": {
            "type": "object",
            "properties": {
                "connection_id": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "direction": {
                    "description": "direction of the message",
                    "allOf": [
                        {
                            "$ref": "#/definitions/db.MessageDirection"
                        }
                    ]
                },
                "id": {
                    "type": "integer"
                },
                "mask": {
                    "type": "boolean"
                },
                "opcode": {
                    "type": "number"
                },
                "payload_data": {
                    "type": "string"
                },
                "timestamp": {
                    "description": "timestamp for when the message was sent/received",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.Workspace": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "db.WorkspaceStats": {
            "type": "object",
            "properties": {
                "history_count": {
                    "type": "integer"
                },
                "issues": {
                    "$ref": "#/definitions/db.IssuesStats"
                },
                "issues_count": {
                    "type": "integer"
                },
                "jwt_count": {
                    "type": "integer"
                },
                "requests": {
                    "$ref": "#/definitions/db.RequestsStats"
                },
                "tasks_count": {
                    "type": "integer"
                },
                "websocket_connections_count": {
                    "type": "integer"
                }
            }
        },
        "db.severity": {
            "type": "string",
            "enum": [
                "Unknown",
                "Info",
                "Low",
                "Medium",
                "High",
                "Critical"
            ],
            "x-enum-varnames": [
                "Unknown",
                "Info",
                "Low",
                "Medium",
                "High",
                "Critical"
            ]
        },
        "lib.LogEntry": {
            "type": "object",
            "properties": {
                "level": {
                    "$ref": "#/definitions/lib.LogLevel"
                },
                "text": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "lib.LogLevel": {
            "type": "string",
            "enum": [
                "INFO",
                "WARN",
                "ERROR"
            ],
            "x-enum-varnames": [
                "INFO",
                "WARN",
                "ERROR"
            ]
        },
        "manual.BrowserReplayActionsResults": {
            "type": "object",
            "properties": {
                "post_request": {
                    "$ref": "#/definitions/actions.ActionsExecutionResults"
                },
                "pre_request": {
                    "$ref": "#/definitions/actions.ActionsExecutionResults"
                }
            }
        },
        "manual.FuzzerInsertionPoint": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "integer"
                },
                "originalValue": {
                    "type": "string"
                },
                "payloadGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/manual.FuzzerPayloadsGroup"
                    }
                },
                "start": {
                    "type": "integer"
                }
            }
        },
        "manual.FuzzerPayloadsGroup": {
            "type": "object",
            "properties": {
                "payloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "base64encode"
                    ]
                },
                "type": {
                    "type": "string"
                },
                "wordlist": {
                    "type": "string"
                }
            }
        },
        "manual.ReplayResult": {
            "type": "object",
            "properties": {
                "browser_actions_results": {
                    "$ref": "#/definitions/manual.BrowserReplayActionsResults"
                },
                "browser_events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/web.PageEvent"
                    }
                },
                "result": {
                    "$ref": "#/definitions/db.History"
                }
            }
        },
        "manual.Request": {
            "type": "object",
            "required": [
                "headers",
                "method",
                "url"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "http_version": {
                    "type": "string"
                },
                "method": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "manual.RequestOptions": {
            "type": "object",
            "properties": {
                "follow_redirects": {
                    "type": "boolean"
                },
                "max_redirects": {
                    "type": "integer",
                    "minimum": 0
                },
                "timeout": {
                    "type": "integer",
                    "minimum": 0
                },
                "update_content_length": {
                    "type": "boolean"
                },
                "update_host_header": {
                    "type": "boolean"
                }
            }
        },
        "manual.Wordlist": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "size_bytes": {
                    "type": "integer"
                },
                "size_human": {
                    "type": "string"
                }
            }
        },
        "options.AuditCategories": {
            "type": "object",
            "properties": {
                "client_side": {
                    "type": "boolean"
                },
                "discovery": {
                    "type": "boolean"
                },
                "passive": {
                    "type": "boolean"
                },
                "server_side": {
                    "type": "boolean"
                }
            }
        },
        "options.FullScanOptions": {
            "type": "object",
            "required": [
                "audit_categories",
                "start_urls",
                "workspace_id"
            ],
            "properties": {
                "audit_categories": {
                    "$ref": "#/definitions/options.AuditCategories"
                },
                "exclude_patterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "experimental_audits": {
                    "type": "boolean"
                },
                "headers": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "insertion_points": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "max_depth": {
                    "type": "integer",
                    "minimum": 0
                },
                "max_pages_to_crawl": {
                    "type": "integer",
                    "minimum": 0
                },
                "mode": {
                    "enum": [
                        "fast",
                        "smart",
                        "fuzz"
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/options.ScanMode"
                        }
                    ]
                },
                "pages_pool_size": {
                    "type": "integer",
                    "maximum": 100,
                    "minimum": 1
                },
                "start_urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 255,
                    "minLength": 1
                },
                "workspace_id": {
                    "type": "integer",
                    "minimum": 0
                }
            }
        },
        "options.ScanMode": {
            "type": "string",
            "enum": [
                "fast",
                "smart",
                "fuzz"
            ],
            "x-enum-varnames": [
                "ScanModeFast",
                "ScanModeSmart",
                "ScanModeFuzz"
            ]
        },
        "report.ReportFormat": {
            "type": "string",
            "enum": [
                "html",
                "json"
            ],
            "x-enum-varnames": [
                "ReportFormatHTML",
                "ReportFormatJSON"
            ]
        },
        "web.PageEvent": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "description": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/web.PageEventType"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "web.PageEventType": {
            "type": "string",
            "enum": [
                "PageJavascriptDialogOpening",
                "BackgroundServiceBackgroundServiceEventReceived",
                "StorageIndexedDBContentUpdated",
                "StorageCacheStorageListUpdated",
                "StorageIndexedDBListUpdated",
                "DatabaseAddDatabase",
                "DebuggerScriptParsed",
                "AuditsIssueAdded",
                "SecuritySecurityStateChanged",
                "SecurityHandleCertificateError",
                "DOMStorageDomStorageItemAdded",
                "DOMStorageDomStorageItemRemoved",
                "DOMStorageDomStorageItemsCleared",
                "DOMStorageDomStorageItemUpdated",
                "SecurityCertificateError",
                "NetworkAuthChallenge",
                "RuntimeConsoleAPICalled"
            ],
            "x-enum-varnames": [
                "JavaScriptDialogOpening",
                "BackgroundServiceEventReceived",
                "StorageIndexedDBContentUpdated",
                "StorageCacheStorageListUpdated",
                "StorageIndexedDBListUpdated",
                "DatabaseAddDatabase",
                "DebuggerScriptParsed",
                "AuditsIssueAdded",
                "SecuritySecurityStateChanged",
                "SecurityHandleCertificateError",
                "DOMStorageDomStorageItemAdded",
                "DOMStorageDomStorageItemRemoved",
                "DOMStorageDomStorageItemsCleared",
                "DOMStorageDomStorageItemUpdated",
                "SecurityCertificateError",
                "NetworkAuthChallenge",
                "RuntimeConsoleAPICalled"
            ]
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "0.1",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Sukyan API",
	Description:      "The Sukyan API documentation.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
