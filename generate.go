//go:build generate
// +build generate

//go:generate go run generate.go
package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/pyneda/sukyan/db"

	"gopkg.in/yaml.v3"
)

func toCamelCase(input string) string {
	words := strings.Split(input, "_")
	for i := range words {
		words[i] = strings.Title(words[i])
	}
	return strings.Join(words, "")
}

type IssueTemplateWrapper struct {
	Original      db.IssueTemplate
	CamelCaseCode string
}

func main() {
	var issueTemplates []IssueTemplateWrapper

	err := filepath.Walk("./db/kb", func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		if !info.IsDir() && strings.HasSuffix(info.Name(), ".yaml") {
			data, err := ioutil.ReadFile(path)
			if err != nil {
				return err
			}

			var issue db.IssueTemplate
			if err := yaml.Unmarshal(data, &issue); err != nil {
				return err
			}

			wrapper := IssueTemplateWrapper{
				Original:      issue,
				CamelCaseCode: toCamelCase(string(issue.Code)),
			}

			issueTemplates = append(issueTemplates, wrapper)
		}

		return nil
	})

	if err != nil {
		fmt.Println("Error walking the path:", err)
		return
	}
	funcMap := template.FuncMap{
		"backtick": func(s string) string {
			// Replace any existing backticks in the string with '`' string literal
			s = strings.ReplaceAll(s, "`", "`+\"`\"+`")
			return "`" + s + "`"
		},
	}
	tmpl, err := template.New("kb_template.go.tmpl").Funcs(funcMap).ParseFiles("db/kb/kb_template.go.tmpl")
	if err != nil {
		fmt.Println("Error parsing template:", err)
		return
	}

	f, err := os.Create("db/kb_autogenerated.go")
	if err != nil {
		fmt.Println("Error creating file:", err)
		return
	}
	defer f.Close()

	err = tmpl.Execute(f, issueTemplates)
	if err != nil {
		fmt.Println("Error executing template:", err)
		return
	}
	fmt.Println("Successfully generated db/kb_autogenerated.go")
}
