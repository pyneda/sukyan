<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sukyan Report - {{ .title }}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/fuse.js@6.4.6"></script>
</head>
<body class="bg-gray-900 text-white">
    <header class="p-4">
        <h1 class="text-3xl font-bold text-center">{{ .title }}</h1>
    </header>
    <div id="app" class="mx-auto p-4 flex flex-col md:flex-row">
        <div class="md:w-1/3 pr-4">
            <div class="mb-4">
                <input type="text" id="search" placeholder="Search issues..." class="w-full p-2 border border-gray-600 rounded bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent">
            </div>
            <div id="results" class="space-y-2"></div>
            <div id="pagination" class="flex justify-center mt-4">
                <button id="prev" class="bg-gray-700 text-white p-2 rounded mr-2">Previous</button>
                <button id="next" class="bg-gray-700 text-white p-2 rounded">Next</button>
            </div>
        </div>
        <div id="details" class="md:w-2/3 mt-4 md:mt-0 pl-4 bg-gray-800 p-6 rounded shadow flex-grow relative">
            <h2 class="text-2xl font-bold mb-4">Select a vulnerability to see details</h2>
        </div>
    </div>

    <script>
        const vulnerabilities = {{ .issues | toJSON }};
        const fuse = new Fuse(vulnerabilities, {
            keys: ['title', 'description', 'details', 'remediation', 'code', 'severity']
        });

        const severityColors = {
            Unknown: "text-gray-800",
            Info: "text-blue-800",
            Low: "text-green-800",
            Medium: "text-yellow-800",
            High: "text-red-800",
            Critical: "text-red-800"
        };

        const itemsPerPage = 100;
        let currentPage = 1;
        let filteredResults = vulnerabilities;

        function createSafeElement(tag, content, className) {
            const element = document.createElement(tag);
            if (className) {
                element.className = className;
            }
            element.textContent = content;
            return element;
        }

        function paginate(array, pageSize, pageNumber) {
            return array.slice((pageNumber - 1) * pageSize, pageNumber * pageSize);
        }

        function decodeBase64(base64) {
            try {
                return atob(base64);
            } catch (e) {
                console.error("Error decoding Base64:", e);
                return "Invalid Base64 data";
            }
        }

        function renderResults(results) {
            const resultsContainer = document.getElementById('results');
            resultsContainer.innerHTML = '';
            const paginatedResults = paginate(results, itemsPerPage, currentPage);

            paginatedResults.forEach(item => {
                const resultItem = document.createElement('div');
                resultItem.className = 'bg-gray-700 p-4 rounded shadow cursor-pointer overflow-x-auto relative';

                const title = createSafeElement('h3', `${item.id} - ${item.title}`, 'text-lg font-bold');

                const topRightContainer = document.createElement('div');
                topRightContainer.className = 'absolute top-2 right-2 flex space-x-2';

                const severityColor = severityColors[item.severity] || severityColors.Unknown;
                const severity = createSafeElement('span', `${item.severity}`, `text-sm font-medium ${severityColor}`);
                severity.className += ' bg-gray-800 p-1 rounded';
                severity.title = 'Severity';

                const confidenceColor = item.confidence > 75 ? "text-green-500" : item.confidence >= 50 ? "text-orange-500" : "text-red-800";
                const confidence = createSafeElement('span', `${item.confidence}/100`, `text-sm font-medium ${confidenceColor}`);
                confidence.className += ' bg-gray-800 p-1 rounded';
                confidence.title = 'Confidence';

                topRightContainer.appendChild(severity);
                topRightContainer.appendChild(confidence);

                const description = createSafeElement('p', item.url, 'text-gray-400');

                resultItem.appendChild(title);
                resultItem.appendChild(topRightContainer);
                resultItem.appendChild(description);
                resultItem.addEventListener('click', () => {
                    document.startViewTransition(() => renderDetails(item));
                });
                resultsContainer.appendChild(resultItem);
            });
        }

        function renderDetails(item) {
            const detailsContainer = document.getElementById('details');
            detailsContainer.innerHTML = '';

            const titleContainer = document.createElement('div');
            titleContainer.className = 'flex justify-between items-center mb-4';

            const title = createSafeElement('h2', item.title, 'text-2xl font-bold');

            const topRightContainer = document.createElement('div');
            topRightContainer.className = 'flex space-x-4 bg-gray-800';

            const severityColor = severityColors[item.severity] || severityColors.Unknown;
            const severity = createSafeElement('p', `${item.severity}`, `text-lg font-semibold bg-gray-900 px-2 py-1 rounded ${severityColor}`);
            severity.title = 'Severity';
            
            const confidenceColor = item.confidence > 75 ? "text-green-500" : item.confidence >= 50 ? "text-orange-500" : "text-red-800";
            const confidence = createSafeElement('p', `${item.confidence}/100`, `text-lg font-semibold bg-gray-900 px-2 py-1 rounded ${confidenceColor}`);
            confidence.title = "Confidence";

            topRightContainer.appendChild(severity);
            topRightContainer.appendChild(confidence);

            titleContainer.appendChild(title);
            titleContainer.appendChild(topRightContainer);

            const createdAt = createSafeElement('p', `Created at: ${item.created_at}`, 'text-sm text-gray-400 mb-4');

            const descriptionLabel = createSafeElement('h4', 'Description', 'text-xl font-semibold');
            const description = createSafeElement('p', item.description, 'text-gray-400 mb-4 whitespace-pre-line');

            detailsContainer.appendChild(titleContainer);
            detailsContainer.appendChild(createdAt);
            detailsContainer.appendChild(descriptionLabel);
            detailsContainer.appendChild(description);

            if (item.details) {
                const detailsLabel = createSafeElement('h4', 'Details', 'text-xl font-semibold');
                const details = createSafeElement('p', item.details, 'text-gray-400 mb-4 whitespace-pre-line');
                detailsContainer.appendChild(detailsLabel);
                detailsContainer.appendChild(details);
            }

            if (item.false_positive) {
                const falsePositiveAlert = createSafeElement('div', 'This issue is marked as a false positive', 'bg-yellow-500 text-black p-2 rounded mb-4');
                detailsContainer.appendChild(falsePositiveAlert);
            }

            if (item.curl_command) {
                const curlLabel = createSafeElement('h4', 'cURL Command', 'text-xl font-semibold');
                const curlCommand = document.createElement('pre');
                curlCommand.className = 'bg-gray-900 p-2 rounded mb-4 text-gray-400 overflow-auto';
                curlCommand.textContent = item.curl_command;
                detailsContainer.appendChild(curlLabel);
                detailsContainer.appendChild(curlCommand);
            }

            if (item.note) {
                const noteLabel = createSafeElement('h4', 'Note', 'text-xl font-semibold');
                const note = createSafeElement('p', item.note, 'text-gray-400 mb-4');
                detailsContainer.appendChild(noteLabel);
                detailsContainer.appendChild(note);
            }

            if (item.payload) {
                const payloadLabel = createSafeElement('h4', 'Payload', 'text-xl font-semibold');
                const payload = document.createElement('pre');
                payload.className = 'bg-gray-900 p-2 rounded mb-4 text-gray-400 overflow-auto';
                payload.textContent = item.payload;
                detailsContainer.appendChild(payloadLabel);
                detailsContainer.appendChild(payload);
            }

            if (item.remediation) {
                const remediationLabel = createSafeElement('h4', 'Remediation', 'text-xl font-semibold');
                const remediation = createSafeElement('p', item.remediation, 'text-gray-400 mb-4');
                detailsContainer.appendChild(remediationLabel);
                detailsContainer.appendChild(remediation);
            }

            if (item.request) {
                const requestLabel = createSafeElement('h4', 'Request', 'text-xl font-semibold');
                const request = document.createElement('pre');
                request.className = 'bg-gray-900 p-2 rounded mb-4 text-gray-400 overflow-auto';
                request.style.maxHeight = '400px';
                request.textContent = decodeBase64(item.request);
                detailsContainer.appendChild(requestLabel);
                detailsContainer.appendChild(request);
            }

            if (item.response) {
                const responseLabel = createSafeElement('h4', 'Response', 'text-xl font-semibold');
                const response = document.createElement('pre');
                response.className = 'bg-gray-900 p-2 rounded mb-4 text-gray-400 overflow-auto';
                response.style.maxHeight = '400px';
                response.textContent = decodeBase64(item.response);
                detailsContainer.appendChild(responseLabel);
                detailsContainer.appendChild(response);
            }

            if (item.references && item.references.length > 0) {
                const referencesLabel = createSafeElement('h4', 'References', 'text-xl font-semibold');
                const referencesList = document.createElement('ul');
                referencesList.className = 'list-disc list-inside text-gray-400';
                item.references.forEach(ref => {
                    const listItem = document.createElement('li');
                    const link = document.createElement('a');
                    link.href = ref;
                    link.textContent = ref;
                    link.className = 'text-blue-400 underline';
                    listItem.appendChild(link);
                    referencesList.appendChild(listItem);
                });
                detailsContainer.appendChild(referencesLabel);
                detailsContainer.appendChild(referencesList);
            }

            // Scroll the details container into view
            detailsContainer.scrollIntoView({ behavior: 'smooth' });
        }

        function updatePaginationButtons() {
            const prevButton = document.getElementById('prev');
            const nextButton = document.getElementById('next');
            
            prevButton.disabled = currentPage === 1;
            nextButton.disabled = currentPage * itemsPerPage >= filteredResults.length;
        }

        function changePage(increment) {
            currentPage += increment;
            renderResults(filteredResults);
            updatePaginationButtons();
        }

        document.getElementById('prev').addEventListener('click', () => {
            if (currentPage > 1) {
                changePage(-1);
            }
        });

        document.getElementById('next').addEventListener('click', () => {
            if (currentPage * itemsPerPage < filteredResults.length) {
                changePage(1);
            }
        });

        document.getElementById('search').addEventListener('input', (e) => {
            const query = e.target.value;
            currentPage = 1;
            if (query) {
                filteredResults = fuse.search(query).map(result => result.item);
            } else {
                filteredResults = vulnerabilities;
            }
            renderResults(filteredResults);
            updatePaginationButtons();
        });

        filteredResults = vulnerabilities;
        renderResults(filteredResults);
        updatePaginationButtons();
    </script>
</body>
</html>
